<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lua on sys🔱fork</title>
    <link>http://sysfork.com/tags/lua/</link>
    <description>Recent content in Lua on sys🔱fork</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 01 May 2017 22:30:00 +0800</lastBuildDate>
    <atom:link href="http://sysfork.com/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>一种在elf中集成脚本文件的方案</title>
      <link>http://sysfork.com/post/a-solution-for-elf-integrate-scripts/</link>
      <pubDate>Mon, 01 May 2017 22:30:00 +0800</pubDate>
      
      <guid>http://sysfork.com/post/a-solution-for-elf-integrate-scripts/</guid>
      <description>

&lt;p&gt;进行游戏服务器开发时，我们将&lt;code&gt;C++&lt;/code&gt;的部分称之为引擎层，而&lt;code&gt;lua&lt;/code&gt;称之为脚本层。但是往往有些核心逻辑是各个游戏公用的，
或者说有些引擎层的代码用&lt;code&gt;C++&lt;/code&gt;写起来十分麻烦，我们还是会使用&lt;code&gt;lua&lt;/code&gt;来编写。这就带来了一些问题，我们的游戏目录结构如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├─bin               // 可执行文件
└─scripts           // 脚本目录，lua文件
    ├─framework     // 核心lua文件，各个项目公用的
    └─server        // 游戏逻辑lua文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;scripts/framework&lt;/code&gt;是各个项目公用的，并且和&lt;code&gt;bin&lt;/code&gt;目录中的可执行文件同时发布和更新。所以有一个想法，就是将&lt;code&gt;framework&lt;/code&gt;中
的lua文件集成到可执行文件中，减少维护的成本。&lt;/p&gt;

&lt;h1 id=&#34;文件存储&#34;&gt;文件存储&lt;/h1&gt;

&lt;p&gt;下面是elf文件的示意图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Elf-layout--en.svg/260px-Elf-layout--en.svg.png&#34; alt=&#34;elf&#34; /&gt;&lt;/p&gt;

&lt;p&gt;elf文件有多个section，除了一些预定义的section如&lt;code&gt;.rodata&lt;/code&gt;、&lt;code&gt;.text&lt;/code&gt;、&lt;code&gt;.init&lt;/code&gt;等，我们也可以定义一些自己的section。所以我们可以将所需要的lua文件
放进这个section中，在执行的时候动态读出来，实现目的。我们可以使用&lt;a href=&#34;https://linux.die.net/man/1/objcopy&#34;&gt;objcopy&lt;/a&gt;命令来实现创建自定义section的功能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objcopy infile.out --add-section .lua-data=section_file outfile.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而&lt;code&gt;framework&lt;/code&gt;里面有多个文件，而且包含嵌套的文件夹，我们需要一个将文件夹变成单个文件的功能，类似于&lt;a href=&#34;https://linux.die.net/man/1/tar&#34;&gt;tar&lt;/a&gt;。虽然创建
section时使用&lt;code&gt;tar&lt;/code&gt;命令是简单的，但是在读取的时候需要一些第三方的库来支持，这是比较麻烦的。而由于我们的目录中只包含&lt;code&gt;lua&lt;/code&gt;文件，所以可以简化设计。
首先空文件夹对于我们是无意义的，只需要&lt;code&gt;lua&lt;/code&gt;文件就可以。所以最终我们得到如下的表:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;┌────────────────────┐
│ libs/json.lua      │
├────────────────────┤
│ core/entity.lua    │
├────────────────────┤
│ app/game.lua       │
├────────────────────┤
│ libs/bson.lua      │
└────────────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以按照如下的格式转换成单个文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;┌────────┬───────────┐
│name_len│content_len│
├────────┴───────────┤
│ core.entity        │
├────────────────────┤
│name_len│content_len│
├────────────────────┤
│ libs.bson          │
├────────────────────┤
│ .................  │
└────────────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;name_len&lt;/code&gt;为文件名的长度，这里直接转换成了lua中&lt;code&gt;require&lt;/code&gt;的格式，使用点符号。&lt;code&gt;content_len&lt;/code&gt;是文件内容的长度，即文件的具体内容长度。最后我们可以使用&lt;code&gt;zip&lt;/code&gt;指令
将这部分内容压缩存储在&lt;code&gt;elf&lt;/code&gt;文件中。完整的代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
#coding: utf-8

import os, struct, StringIO, zlib, subprocess, sys, tempfile, argparse

argParser = argparse.ArgumentParser()

argParser.add_argument(&amp;quot;luafolder&amp;quot;, type=str)
argParser.add_argument(&amp;quot;exe&amp;quot;, type=str)
argParser.add_argument(&amp;quot;out&amp;quot;, type=str)

args = argParser.parse_args()

files = []

path = args.luafolder

for (dirpath, dirname, filenames) in os.walk(path):
    dirp = dirpath[len(path):]
    if dirp:
        if dirp[-1] != &amp;quot;/&amp;quot;:
            dirp += &amp;quot;/&amp;quot;

        while dirp[0] == &amp;quot;/&amp;quot;:
            dirp = dirp[1:]

    files.extend([dirp + x for x in filenames])

output = StringIO.StringIO()

for fpath in files:
    realp = path + &amp;quot;/&amp;quot; + fpath
    filesize = os.path.getsize(realp)

    if fpath.endswith(&amp;quot;.lua&amp;quot;):
        fpath = fpath[:-4]
    elif fpath.endswith(&amp;quot;.luac&amp;quot;):
        fpath = fpath[:-5]
    else:
        continue

    package_pattern = fpath.replace(&amp;quot;/&amp;quot;, &amp;quot;.&amp;quot;)
    package_pattern = &amp;quot;pg.&amp;quot; + package_pattern
    with open(realp, &amp;quot;rb&amp;quot;) as rf:
        content = rf.read()
        output.write(struct.pack(&amp;quot;=hL&amp;quot;, len(package_pattern), len(content)))
        output.write(package_pattern)
        output.write(content)

f = tempfile.NamedTemporaryFile()

outdata = output.getvalue()
f.write(struct.pack(&amp;quot;=L&amp;quot;, len(outdata)))
f.write(zlib.compress(output.getvalue()))
f.flush()

subprocess.call(&amp;quot;objcopy %s --remove-section .lua-data&amp;quot;%(args.exe, ), shell=True)
subprocess.call(&amp;quot;objcopy %s --add-section .lua-data=%s %s&amp;quot;%(args.exe, f.name, args.out), shell=True)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;文件内容的读取&#34;&gt;文件内容的读取&lt;/h1&gt;

&lt;p&gt;我们需要使用&lt;code&gt;elf.h&lt;/code&gt;文件来读取文件内容。根据上述的格式示意图，&lt;code&gt;elf&lt;/code&gt;文件开头的是Header，其格式为&lt;code&gt;ElfXX_Ehdr&lt;/code&gt;，
我们可以直接读取文件内容到内存。然后读取&lt;code&gt;e_shoff&lt;/code&gt;字段获得section header的位置，定位到位置并依次读取内容到&lt;code&gt;ElfXX_Shdr&lt;/code&gt;
结构体中，然后通过各个entry的&lt;code&gt;sh_name&lt;/code&gt;得到最终section，然后读取文件达到目的。完整代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static std::map&amp;lt;std::string, std::string&amp;gt; readElfLuaData(const std::string &amp;amp;filepath) {
    std::map&amp;lt;std::string, std::string&amp;gt; files;
#if __x86_64__
    typedef Elf64_Ehdr ELF_EHDR;
    typedef Elf64_Shdr ELF_SHDR;
#else
    typedef Elf32_Ehdr ELF_EHDR;
    typedef Elf32_Shdr ELF_SHDR;
#endif

    std::ifstream ifs(filepath);

    ELF_EHDR hdr;
    ifs.read(reinterpret_cast&amp;lt;char *&amp;gt;(&amp;amp;hdr), sizeof(hdr));

    std::vector&amp;lt;ELF_SHDR&amp;gt; sh_tables(hdr.e_shnum);
    ifs.seekg(static_cast&amp;lt;long&amp;gt;(hdr.e_shoff));

    for (size_t i = 0; i &amp;lt; hdr.e_shnum; ++i) {
        ifs.read(reinterpret_cast&amp;lt;char *&amp;gt;(&amp;amp;sh_tables[i]), sizeof(sh_tables[i]));
    }

    // read shstr

    std::vector&amp;lt;char&amp;gt; shstr(sh_tables[hdr.e_shstrndx].sh_size);
    ifs.seekg(static_cast&amp;lt;long&amp;gt;(sh_tables[hdr.e_shstrndx].sh_offset));
    ifs.read(shstr.data(), static_cast&amp;lt;long&amp;gt;(shstr.size()));

    ELF_SHDR *lua_sh = nullptr;

    for (size_t i = 0; i &amp;lt; hdr.e_shnum; ++i) {
        char *name = shstr.data() + sh_tables[i].sh_name;
        if (strcmp(name, &amp;quot;.lua-data&amp;quot;) == 0) {
            lua_sh = &amp;amp;sh_tables[i];
            break;
        }
    }

    if (lua_sh) {
        std::vector&amp;lt;char&amp;gt; buf(lua_sh-&amp;gt;sh_size);
        ifs.seekg(static_cast&amp;lt;long&amp;gt;(lua_sh-&amp;gt;sh_offset));
        ifs.read(buf.data(), static_cast&amp;lt;std::streamsize&amp;gt;(buf.size()));

        size_t idx = 0;
#define READ_TO(TARGET, SIZE)                                                                      \
    memcpy(TARGET, buf.data() + idx, SIZE);                                                        \
    idx += SIZE;

        uint32_t raw_len = 0;
        READ_TO(&amp;amp;raw_len, sizeof(raw_len));

        std::vector&amp;lt;char&amp;gt; tmp(raw_len);
        uLongf dest_len = tmp.size();
        uncompress(reinterpret_cast&amp;lt;Bytef *&amp;gt;(tmp.data()), &amp;amp;dest_len,
                   reinterpret_cast&amp;lt;Bytef *&amp;gt;(buf.data() + idx), buf.size() - idx);

        buf.swap(tmp);
        idx = 0;

        while (idx &amp;lt; dest_len) {
            uint16_t name_len;
            uint32_t content_len;
            READ_TO(&amp;amp;name_len, sizeof(name_len));
            READ_TO(&amp;amp;content_len, sizeof(content_len));
            std::string filename(name_len, 0), content(content_len, 0);
            READ_TO(&amp;amp;*filename.begin(), filename.size());
            READ_TO(&amp;amp;*content.begin(), content.size());
            files.emplace(std::piecewise_construct, std::forward_as_tuple(std::move(filename)),
                          std::forward_as_tuple(std::move(content)));
        }
#undef READ_TO
    }
    return files;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来便可以通过添加到&lt;code&gt;package.preload&lt;/code&gt;实现在lua中调用这些文件的目的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lua与C交互中的死循环检测</title>
      <link>http://sysfork.com/post/lua-c-detect-inifinite-loop/</link>
      <pubDate>Fri, 21 Apr 2017 17:37:30 +0800</pubDate>
      
      <guid>http://sysfork.com/post/lua-c-detect-inifinite-loop/</guid>
      <description>

&lt;p&gt;现在很多游戏引擎都是&lt;code&gt;C++&lt;/code&gt; + &lt;code&gt;lua&lt;/code&gt;的结构，一旦某个服务器开发人员大意写出死循环代码，很容易导致服务无响应，影响服务器稳定。所以引擎中最好能提供一个死循环的检测机制，一旦出现死循环则执行一些行为打断当前流程。&lt;/p&gt;

&lt;p&gt;死循环的检测是一个&lt;a href=&#34;https://en.wikipedia.org/wiki/Halting_problem&#34;&gt;停机问题&lt;/a&gt;。我们无法判断到底是任务执行时间过长，还是进入了真正的死循环，好在这对我们的服务来说区别并不重要。所以一个简单的判断条件是，执行时间是否超过了预定的阈值。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C++&lt;/code&gt;中集成&lt;code&gt;lua&lt;/code&gt;，调用到游戏逻辑时，一般通过&lt;a href=&#34;http://pgl.yoyo.org/luai/i/lua_pcall&#34;&gt;pcall&lt;/a&gt;，但是一旦调用了&lt;code&gt;pcall&lt;/code&gt;，代码的执行路径便进入了&lt;code&gt;lua&lt;/code&gt;的世界，除非通过信号机制才能在当前线程中中断，实现执行其他分支的目的。除此之外，&lt;code&gt;lua&lt;/code&gt;还提供了&lt;code&gt;debug.sethook&lt;/code&gt;函数，可以在执行正常逻辑中触发&lt;code&gt;hook&lt;/code&gt;，实现监测超时的功能。所以我们有以下两种方案：&lt;/p&gt;

&lt;h1 id=&#34;使用-debug-sethook-来实现&#34;&gt;使用&lt;code&gt;debug.sethook()&lt;/code&gt;来实现&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;debug.sethook ([thread,] hook, mask [, count])
Sets the given function as a hook. The string mask and the number count describe when the hook will be called. The string mask may have the following characters, with the given meaning:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;c&amp;rdquo;: the hook is called every time Lua calls a function;
&amp;ldquo;r&amp;rdquo;: the hook is called every time Lua returns from a function;
&amp;ldquo;l&amp;rdquo;: the hook is called every time Lua enters a new line of code.
With a count different from zero, the hook is called after every count instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我们只要在执行&lt;code&gt;pcall&lt;/code&gt;之前设定类似如下的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;debug.sethook(function()error(&amp;quot;timeout&amp;quot;)end, &amp;quot;c&amp;quot;, 10000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理论上只要代码指令数超过10000条就能触发&lt;code&gt;error&lt;/code&gt;。好像挺完美的。&lt;/p&gt;

&lt;p&gt;But，在&lt;code&gt;luajit&lt;/code&gt;下这条不一定成立，因为执行的逻辑被&lt;code&gt;jit&lt;/code&gt;编译了，而在这种情况下，&lt;code&gt;hook&lt;/code&gt;是不会触发的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your program is running in a tight loop and never falls back to the interpreter, the debug hook never runs and can&amp;rsquo;t throw the &amp;ldquo;interrupted!&amp;rdquo; error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是还有一个未公开的编译选项&lt;code&gt;LUAJIT_ENABLE_CHECKHOOK&lt;/code&gt;，在&lt;code&gt;lj_record.c&lt;/code&gt;文件的最后面，上面写道&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regularly check for instruction/line hooks from compiled code and
exit to the interpreter if the hooks are set.&lt;/p&gt;

&lt;p&gt;This is a compile-time option and disabled by default, since the
hook checks may be quite expensive in tight loops.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看似可以，但是注意，如果&lt;code&gt;hook&lt;/code&gt;被设置了，则执行的代价是比较昂贵的。对于游戏而言，大部分的时间都在&lt;code&gt;lua&lt;/code&gt;层，而为了监测死循环，几乎
要在所有的lua执行过程中设置&lt;code&gt;hook&lt;/code&gt;，这是不太容易接受的。好在下面的注释提到了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can set the instruction hook via lua_sethook() with a count of 1
from a signal handler or another native thread. Please have a look
at the first few functions in luajit.c for an example (Ctrl-C handler).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;嗯，看样子只能使用第二种方案了。&lt;/p&gt;

&lt;h1 id=&#34;使用信号来实现&#34;&gt;使用信号来实现&lt;/h1&gt;

&lt;p&gt;在lua的命令行程序中我们可以通过&lt;code&gt;Ctrl-C&lt;/code&gt;中断正在执行的程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;  for i=1,10000000 do sum = sum + i end
^Cinterrupted!
stack traceback:
        stdin:1: in main chunk
        [C]: in ?

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仔细看&lt;code&gt;lua.c&lt;/code&gt;文件，可以看到以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;static void lstop (lua_State *L, lua_Debug *ar) {
  (void)ar;  /* unused arg. */
  lua_sethook(L, NULL, 0, 0);
  luaL_error(L, &amp;quot;interrupted!&amp;quot;);
}


static void laction (int i) {
  signal(i, SIG_DFL); /* if another SIGINT happens before lstop,
                              terminate process (default action) */
  lua_sethook(globalL, lstop, LUA_MASKCALL | LUA_MASKRET | LUA_MASKCOUNT, 1);
}

// ....
//in docall
signal(SIGINT, laction);
status = lua_pcall(L, narg, (clear ? 0 : LUA_MULTRET), base);
signal(SIGINT, SIG_DFL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯，在执行&lt;code&gt;pcall&lt;/code&gt;之前设置了信号处理函数，捕捉&lt;code&gt;Ctrl-C&lt;/code&gt;的信号，一旦发生，则立马调用&lt;code&gt;lua_sethook&lt;/code&gt;函数，指定在执行下一行代码时调用&lt;code&gt;lstop&lt;/code&gt;，而在&lt;code&gt;lstop&lt;/code&gt;中就直接抛出&lt;code&gt;error&lt;/code&gt;了。所以问题是 &lt;strong&gt;&lt;code&gt;lua_sethook&lt;/code&gt;是可以在信号处理函数中调用的&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;答案：是&lt;/p&gt;

&lt;p&gt;从源码中可以看到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* This function can be called asynchronously (e.g. during a signal). */
LUA_API int lua_sethook(lua_State *L, lua_Hook func, int mask, int count)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除此之外，从&lt;code&gt;luajit&lt;/code&gt;的源码注释来看，不仅仅在信号处理函数中，在其他线程中也能被调用
&amp;gt; from a signal handler or another native thread.&lt;/p&gt;

&lt;p&gt;所以，这种方案是可行的。因此，对于单线程程序而言，可以通过设置&lt;code&gt;alarm&lt;/code&gt;来实现超时设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alarm(10);// trigger after 10s
signal(SIGALRM, laction);
status = lua_pcall(L, narg, (clear ? 0 : LUA_MULTRET), base);
alarm(0)
signal(SIGALRM, SIG_DFL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而对于多线程程序，可以直接启一个定时器来来&lt;code&gt;check&lt;/code&gt;，而不用使用很恶心的信号。&lt;/p&gt;

&lt;p&gt;值得一提的是，使用这种方式触发超时&lt;code&gt;error&lt;/code&gt;可以很轻易地在&lt;code&gt;pcall&lt;/code&gt;中捕获，从而而已实现堆栈的打印等功能，方便查找和定位问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lua Table中HashMap介绍</title>
      <link>http://sysfork.com/post/lua-hashtable-introduction/</link>
      <pubDate>Thu, 01 Sep 2016 17:40:08 +0800</pubDate>
      
      <guid>http://sysfork.com/post/lua-hashtable-introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.lua.org/pil/2.5.html&#34;&gt;Table&lt;/a&gt; 在Lua中有着极其重要的应用，从核心语言实现，如&lt;a href=&#34;https://en.wikipedia.org/wiki/String_interning&#34;&gt;short string intern&lt;/a&gt;，
到利用&lt;a href=&#34;https://www.lua.org/pil/13.html&#34;&gt;metatable&lt;/a&gt;实现的&lt;a href=&#34;lua-users.org/wiki/LuaClassesWithMetatable&#34;&gt;class&lt;/a&gt;，table几乎无所不能。如此高频度地利用也就意味着lua必须要有一个高效的
table实现。&lt;/p&gt;

&lt;p&gt;很多语言提供了array和associative array两种数据结构。array是指以某个指定的最小整数下标(一般是0)开始的连续存储的数据结构，它有vector、list、array、ArrayList等多种名称；associative array，中文
也叫关联数组，即将一对key/pair之间关联起来，它一般也被称为map、dict等。Lua并不提供array，因为数组本身也是一种特殊的关联数组。但是从内部表示上，array和map有着极大的不同，array只需要一块连续的
内存即可实现，而map则有多种实现。Lua为了效率，将一部分整数下标的元素存储在array part中，而将其他元素存储在hashmap中，实现在外部接口不变的情况下实现了效率的最大化。array部分没有什么特别需要
优化的，其就是一整块连续的内存，存储和读取的时间复杂度都是O(1)，而hashmap的实现称为了lua table设计的重点。&lt;/p&gt;

&lt;p&gt;map有多种实现手段，在stl中，默认的map使用的是红黑树，存储和读取的时间复杂度都是O(logn)；虽然红黑树的表现十分稳定，但是实现比较复杂而且无法满足极端性能要求，
C++11中添加新的&lt;a href=&#34;http://en.cppreference.com/w/cpp/container/unordered_map&#34;&gt;unordered_map&lt;/a&gt;，其实现就是使用了一个hashmap。hashmap的基本流程是使用一个hash函数来将
一个key映射到一块连续内存中，实现在理想情况下访问和删除接近O(1)的时间复杂度。&lt;/p&gt;

&lt;p&gt;由于一般key的取值范围大于hashmap slot数目，所以不可避免地出现冲突的状况。在教科书中，解决这种冲突一般有两种方法：&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Separate_chaining&#34;&gt;链表法&lt;/a&gt;
和&lt;a href=&#34;https://en.wikipedia.org/wiki/Open_addressing&#34;&gt;开放寻址法&lt;/a&gt;。链表法的实现比较简单，将冲突的元素使用链表链接起来即可；而开放寻址法则需要多次计算，直至找到一个没有冲突的slot为止。
这两者都有自己的优缺点，链表法由于使用了链表，无法充分利用CPU缓存，并且实现深拷贝难度较大；而开放寻址法无法实现删除元素的功能，并且当元素密度比较大时，效率非常低。&lt;/p&gt;

&lt;p&gt;Lua table使用了一个折中的方案，叫做&lt;a href=&#34;https://en.wikipedia.org/wiki/Coalesced_hashing&#34;&gt;Coalesced_hashing&lt;/a&gt;，结合使用了链表法和开放寻址法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/4/4c/CoalescedHash.jpg&#34; alt=&#34;Coalesced_hashing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当插入一个元素时，定义其原本应该在的位置为mainposition，如果mainpoisition对应的slot是空的，则直接插入；如果非空，看看在那个位置上的元素的mainposition是不是当前的slot，如果不是的
话，则将其移动到任意一个空的slot(位置A)，然后将当前的元素插入到mainposition位置，并将当前的next字段设置成位置A，形成链表。如果占用元素mainposition就是当前位置，则将待插入的
元素插入到任意一个空的位置上，并链接到占用元素的后面。&lt;/p&gt;

&lt;p&gt;通过上面的过程，实现了所有的元素都尽量保存在mainposition上，当查找的时候也能使用更少的次数来找到元素位置。这对元素本来就在hashmap中，效率是比较高的。但是，当元素不在hashmap中，查找的代价
比较高。&lt;/p&gt;

&lt;p&gt;lua table的代码实现在&lt;a href=&#34;https://www.lua.org/source/5.3/ltable.c.html&#34;&gt;这里&lt;/a&gt;，实现非常简洁明了，也不是很难懂，但是对于平时经常使用lua的同学来说读一读还是很有必要的。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>