<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathjax on sys🔱fork</title>
    <link>http://sysfork.com/tags/mathjax/</link>
    <description>Recent content in Mathjax on sys🔱fork</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Fri, 02 Sep 2016 09:41:17 +0800</lastBuildDate>
    <atom:link href="http://sysfork.com/tags/mathjax/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo 集成 Mathjax和graphviz</title>
      <link>http://sysfork.com/post/integrate-mathjax-viz-with-hugo/</link>
      <pubDate>Fri, 02 Sep 2016 09:41:17 +0800</pubDate>
      
      <guid>http://sysfork.com/post/integrate-mathjax-viz-with-hugo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;是一个比&lt;a href=&#34;https://hexo.io&#34;&gt;hexo&lt;/a&gt;更简单易用的静态页面生成工具，其只有一个可执行文件，部署环境简单，本博客就是基于hugo构建的。&lt;/p&gt;

&lt;p&gt;我们在写博客的时候经常应用到公式和图表，这分别可以使用&lt;a href=&#34;https://www.mathjax.org/&#34;&gt;mathjax&lt;/a&gt;和&lt;a href=&#34;https://github.com/mdaines/viz.js&#34;&gt;viz.js&lt;/a&gt;实现。hugo并没有提供
内置的支持，所以需要我们自己写相关的支持。&lt;/p&gt;

&lt;p&gt;由于并不是所有的文章都需要mathjax和viz.js，所以需要按需使用，这个可以在每个post的前言上定义&lt;code&gt;plugins&lt;/code&gt;变量，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title = &amp;quot;Hugo 集成 Mathjax和graphviz&amp;quot;
plugins = [&amp;quot;mathjax&amp;quot;, &amp;quot;viz&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再&lt;code&gt;partials&lt;/code&gt;目录下添加一个&lt;code&gt;post_plugins.html&lt;/code&gt;，并在&lt;code&gt;post/single.html&lt;/code&gt;引入这个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ partial &amp;quot;post_plugins.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;post_plugins.html&lt;/code&gt;文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;plugins&amp;quot; }}
    {{ range .Params.plugins }}
        {{ $path := . | printf &amp;quot;post_plugins/%s.html&amp;quot;}}
        {{ partial $path }}
    {{ end }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;逻辑即通过便利&lt;code&gt;plugins&lt;/code&gt;参数内容，然后引入对应的html文件。在目前的这个例子中，我们使用了mathjax和viz。其中&lt;code&gt;post_plugins/mathjax.html&lt;/code&gt;的内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.bootcss.com/mathjax/2.6.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
MathJax.Hub.Queue(function() {
  var all = MathJax.Hub.getAllJax(), i;
  for(i = 0; i &amp;lt; all.length; i += 1) {
      all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
  }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就能使用&lt;code&gt;\$&lt;/code&gt;或&lt;code&gt;\$\$&lt;/code&gt;来编写公式了，最终示例表现如下：
$$ [ \left [ &amp;#8211; \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi ]$$&lt;/p&gt;

&lt;p&gt;对于&lt;code&gt;post_plugins/viz.html&lt;/code&gt;内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.bootcss.com/viz.js/1.3.0/viz.js&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function(){
    var vizPrefix = &amp;quot;language-viz-&amp;quot;;
    Array.prototype.forEach.call(document.querySelectorAll(&amp;quot;[class^=&amp;quot; + vizPrefix + &amp;quot;]&amp;quot;), function(x){
        var engine;
        x.getAttribute(&amp;quot;class&amp;quot;).split(&amp;quot; &amp;quot;).forEach(function(cls){
            if (cls.startsWith(vizPrefix)) {
                engine = cls.substr(vizPrefix.length);
            }
        });
        var image = new DOMParser().parseFromString(Viz(x.innerText, {format:&amp;quot;svg&amp;quot;, engine:engine}), &amp;quot;image/svg+xml&amp;quot;);
        x.parentNode.insertBefore(image.documentElement, x);
        x.style.display = &#39;none&#39;
    });
})();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码的作用，就是将codeblock类型为language-viz-xxx的自动渲染为svg图像显示，以下是示例：&lt;/p&gt;

&lt;p&gt;原始内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```viz-dot
    digraph g { a -&amp;gt; b; }
    ```

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34;&gt;    digraph g { a -&amp;gt; b; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同理，对于其他需要特殊支持的格式或表现，都可以通过添加post_plugins来实现。以上代码都在本网站的&lt;a href=&#34;https://github.com/usbuild/site.git&#34;&gt;github&lt;/a&gt;上。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>