<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sys🔱fork</title>
    <link>http://sysfork.com/</link>
    <description>Recent content on sys🔱fork</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 08 Sep 2016 23:23:26 +0800</lastBuildDate>
    <atom:link href="http://sysfork.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>联系我</title>
      <link>http://sysfork.com/contact/</link>
      <pubDate>Thu, 08 Sep 2016 23:23:26 +0800</pubDate>
      
      <guid>http://sysfork.com/contact/</guid>
      <description>&lt;p&gt;邮箱： &lt;span class=&#34;reverse&#34;&gt;moc.liamg@oahciqgnahzujn&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>http://sysfork.com/about/</link>
      <pubDate>Thu, 08 Sep 2016 22:57:34 +0800</pubDate>
      
      <guid>http://sysfork.com/about/</guid>
      <description>&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;//cdn.bootcss.com/cc-icons/1.2.1/css/cc-icons.min.css&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如无特殊说明，本站文章均为原创，采用 &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/2.5/deed.zh&#34;&gt;&lt;i class=&#34;cc cc-lg cc-by-nc-sa&#34;&gt;&lt;/i&gt;&lt;/a&gt;协议。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>理解Linux下动态链接库延迟绑定</title>
      <link>http://sysfork.com/post/linux-dynamic-lib-lazy-load/</link>
      <pubDate>Wed, 07 Sep 2016 22:08:20 +0800</pubDate>
      
      <guid>http://sysfork.com/post/linux-dynamic-lib-lazy-load/</guid>
      <description>&lt;script src=&#34;//cdn.bootcss.com/highlight.js/9.6.0/languages/x86asm.min.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;在编译动态链接库时，为了保证能被正常使用，一般我们会加上-fPIC参数。在使用的动态链接库中的函数时，Linux使用了一种
叫延迟绑定的技术实现运行时的symbol relocation。其中的关键就是GOT(Global Offset Table)和PLT(Procedure linkage Table)。下面就
这一技术的实现简单解释一下。&lt;/p&gt;

&lt;p&gt;首先写一个很简单的需要动态链接的程序，如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//dl_test.c
#include &amp;lt;stdio.h&amp;gt;
int main(int argc, const char *argv[])
{
    puts(&amp;quot;1234&amp;quot;);
    puts(&amp;quot;1234&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用&lt;code&gt;gcc&lt;/code&gt;编译并链接: &lt;code&gt;gcc -g dl_test.c -o dl_test.c&lt;/code&gt;。先别急着运行这个程序，我们使用&lt;code&gt;objdump&lt;/code&gt;反编译一下看看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ objdump -S dl_test
......
0000000000400506 &amp;lt;main&amp;gt;:
#include &amp;lt;stdio.h&amp;gt;
int main(int argc, const char *argv[])
{
  400506:       55                      push   %rbp
  400507:       48 89 e5                mov    %rsp,%rbp
  40050a:       48 83 ec 10             sub    $0x10,%rsp
  40050e:       89 7d fc                mov    %edi,-0x4(%rbp)
  400511:       48 89 75 f0             mov    %rsi,-0x10(%rbp)
    puts(&amp;quot;1234&amp;quot;);
  400515:       bf b4 05 40 00          mov    $0x4005b4,%edi
  40051a:       e8 c1 fe ff ff          callq  4003e0 &amp;lt;puts@plt&amp;gt;
    puts(&amp;quot;1234&amp;quot;);
  40051f:       bf b4 05 40 00          mov    $0x4005b4,%edi
  400524:       e8 b7 fe ff ff          callq  4003e0 &amp;lt;puts@plt&amp;gt;
    return 0;
  400529:       b8 00 00 00 00          mov    $0x0,%eax
}
  40052e:       c9                      leaveq
  40052f:       c3                      retq
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，在&lt;code&gt;40051a&lt;/code&gt;和&lt;code&gt;400524&lt;/code&gt;两处都调用了我们的&lt;code&gt;puts&lt;/code&gt;函数。但是看后面的注解，&lt;code&gt;&amp;lt;puts@plt&amp;gt;&lt;/code&gt;表示这并不是&lt;code&gt;puts&lt;/code&gt;的地址，而是另有目的。
我们使用&lt;code&gt;gdb&lt;/code&gt;来跟踪一下执行过程：&lt;code&gt;gdb dl_test&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) l
1	#include &amp;lt;stdio.h&amp;gt;
2	int main(int argc, const char *argv[])
3	{
4	    puts(&amp;quot;1234&amp;quot;);
5	    puts(&amp;quot;1234&amp;quot;);
6	    return 0;
7	}
(gdb) b 4
Breakpoint 1 at 0x400515: file dl_test.c, line 4.
(gdb) r
Starting program: /home/zqc/workspace/cpptest/dl_test

Breakpoint 1, main (argc=1, argv=0x7fffffffeb98) at dl_test.c:4
4	    puts(&amp;quot;1234&amp;quot;);
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里设置了一下断点到第一个&lt;code&gt;puts&lt;/code&gt;的调用出，使用&lt;code&gt;layout asm&lt;/code&gt;切换成汇编模式:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;(gdb) layout asm
   ┌────────────────────────────────────────────────────────────────────────────────────────────┐
B+&amp;gt;│0x400515 &amp;lt;main+15&amp;gt;              mov    $0x4005b4,%edi                                       │
   │0x40051a &amp;lt;main+20&amp;gt;              callq  0x4003e0 &amp;lt;puts@plt&amp;gt;                                  │
   │0x40051f &amp;lt;main+25&amp;gt;              mov    $0x4005b4,%edi                                       │
   │0x400524 &amp;lt;main+30&amp;gt;              callq  0x4003e0 &amp;lt;puts@plt&amp;gt;                                  │
   │0x400529 &amp;lt;main+35&amp;gt;              mov    $0x0,%eax                                            │
   │0x40052e &amp;lt;main+40&amp;gt;              leaveq                                                      │
   │0x40052f &amp;lt;main+41&amp;gt;              retq                                                        │
   │0x400530 &amp;lt;__libc_csu_init&amp;gt;      push   %r15                                                 │
   │0x400532 &amp;lt;__libc_csu_init+2&amp;gt;    mov    %edi,%r15d                                           │
   │0x400535 &amp;lt;__libc_csu_init+5&amp;gt;    push   %r14                                                 │
   │0x400537 &amp;lt;__libc_csu_init+7&amp;gt;    mov    %rsi,%r14                                            │
   │0x40053a &amp;lt;__libc_csu_init+10&amp;gt;   push   %r13                                                 │
   │0x40053c &amp;lt;__libc_csu_init+12&amp;gt;   mov    %rdx,%r13                                            │
   │0x40053f &amp;lt;__libc_csu_init+15&amp;gt;   push   %r12                                                 │
   │0x400541 &amp;lt;__libc_csu_init+17&amp;gt;   lea    0x2001a0(%rip),%r12        # 0x6006e8                │
   │0x400548 &amp;lt;__libc_csu_init+24&amp;gt;   push   %rbp                                                 │
   │0x400549 &amp;lt;__libc_csu_init+25&amp;gt;   lea    0x2001a0(%rip),%rbp        # 0x6006f0                │
   │0x400550 &amp;lt;__libc_csu_init+32&amp;gt;   push   %rbx                                                 │
   │0x400551 &amp;lt;__libc_csu_init+33&amp;gt;   sub    %r12,%rbp                                            │
   └────────────────────────────────────────────────────────────────────────────────────────────┘
child process 8855 In: main                                              Line: 4    PC: 0x400515
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;stepi&lt;/code&gt;或者简写为&lt;code&gt;si&lt;/code&gt;执行下一条汇编指令。我们一直跟踪到&lt;code&gt;call&lt;/code&gt;指令中去：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;   ┌────────────────────────────────────────────────────────────────────────────────────────────────────────┐
  &amp;gt;│0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)   # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;              │
   │0x4003e6 &amp;lt;puts@plt+6&amp;gt;                   pushq  $0x0                                                     │
   │0x4003eb &amp;lt;puts@plt+11&amp;gt;                  jmpq   0x4003d0                                                 │
   │0x4003f0 &amp;lt;__libc_start_main@plt&amp;gt;        jmpq   *0x200502(%rip)   # 0x6008f8 &amp;lt;__libc_start_main@got.plt&amp;gt; │
   │0x4003f6 &amp;lt;__libc_start_main@plt+6&amp;gt;      pushq  $0x1                                                     │
   │0x4003fb &amp;lt;__libc_start_main@plt+11&amp;gt;     jmpq   0x4003d0                                                 │
   │0x400400 &amp;lt;__gmon_start__@plt&amp;gt;           jmpq   *0x2004fa(%rip)   # 0x600900 &amp;lt;__gmon_start__@got.plt&amp;gt;    │
   │0x400406 &amp;lt;__gmon_start__@plt+6&amp;gt;         pushq  $0x2                                                     │
   │0x40040b &amp;lt;__gmon_start__@plt+11&amp;gt;        jmpq   0x4003d0                                                 │
   │0x400410 &amp;lt;_start&amp;gt;                       xor    %ebp,%ebp                                                │
   │0x400412 &amp;lt;_start+2&amp;gt;                     mov    %rdx,%r9                                                 │
   │0x400415 &amp;lt;_start+5&amp;gt;                     pop    %rsi                                                     │
   │0x400416 &amp;lt;_start+6&amp;gt;                     mov    %rsp,%rdx                                                │
   │0x400419 &amp;lt;_start+9&amp;gt;                     and    $0xfffffffffffffff0,%rsp                                 │
   │0x40041d &amp;lt;_start+13&amp;gt;                    push   %rax                                                     │
   │0x40041e &amp;lt;_start+14&amp;gt;                    push   %rsp                                                     │
   │0x40041f &amp;lt;_start+15&amp;gt;                    mov    $0x4005a0,%r8                                            │
   │0x400426 &amp;lt;_start+22&amp;gt;                    mov    $0x400530,%rcx                                           │
   │0x40042d &amp;lt;_start+29&amp;gt;                    mov    $0x400506,%rdi                                           │
   └────────────────────────────────────────────────────────────────────────────────────────────────────────┘
child process 9211 In: puts@plt                                                      Line: ??   PC: 0x4003e0
0x00000000004003e0 in puts@plt ()
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;0x4003e0&lt;/code&gt;是刚刚跳转的地址，也就是&lt;code&gt;&amp;lt;puts@plt&amp;gt;&lt;/code&gt;，从这个名字中我们可以看出，这个地址是属于&lt;code&gt;plt&lt;/code&gt;的。先说一下&lt;code&gt;plt&lt;/code&gt;的作用，&lt;code&gt;plt&lt;/code&gt;的全称是
过程链接表，意思就是当调用一个动态链接库中的函数时，其访问的是其实是&lt;code&gt;plt&lt;/code&gt;中的一个过程，这个过程会完成真正的调用。我们分别看下属于&lt;code&gt;puts&lt;/code&gt;中
&lt;code&gt;plt&lt;/code&gt;的项目&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;  &amp;gt;│0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)        # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;     │
   │0x4003e6 &amp;lt;puts@plt+6&amp;gt;                   pushq  $0x0                                                 │
   │0x4003eb &amp;lt;puts@plt+11&amp;gt;                  jmpq   0x4003d0                                             │
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;0x20050a(%rip)&lt;/code&gt; 即 &lt;code&gt;got&lt;/code&gt;中的地址，在初始情况下，该选项为&lt;code&gt;plt&lt;/code&gt;项中的下一条指令，所以执行&lt;code&gt;jmpq   *0x20050a(%rip)&lt;/code&gt; 直接会进入到
下一条指令&lt;code&gt;pushq&lt;/code&gt;， &lt;code&gt;pushq $0x0&lt;/code&gt;的目的是把当前在符号(&lt;code&gt;puts&lt;/code&gt;)在&lt;code&gt;.rela.plt&lt;/code&gt;中的index。我们可以使用&lt;code&gt;readelf&lt;/code&gt;指令看下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ readelf -r dl_test

Relocation section &#39;.rela.dyn&#39; at offset 0x348 contains 1 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
0000006008d0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0

Relocation section &#39;.rela.plt&#39; at offset 0x360 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
0000006008f0  000100000007 R_X86_64_JUMP_SLO 0000000000000000 puts + 0
0000006008f8  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __libc_start_main + 0
000000600900  000300000007 R_X86_64_JUMP_SLO 0000000000000000 __gmon_start__ + 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，&lt;code&gt;puts&lt;/code&gt;的index为0，第一项，所以这里push的是&lt;code&gt;$0x0&lt;/code&gt;。同理，下面的&lt;code&gt;__libc_start_main&lt;/code&gt;就是&lt;code&gt;$0x1&lt;/code&gt;。 下一行语句是&lt;code&gt;jmpq   0x4003d0&lt;/code&gt;，这个地址是
固定的，所有的&lt;code&gt;plt&lt;/code&gt;入口最后一句语句都是这个，这是个通用的过程。
继续&lt;code&gt;stepi&lt;/code&gt;到jump的位置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;  &amp;gt;│0x4003d0                                pushq  0x20050a(%rip)        # 0x6008e0                     │
   │0x4003d6                                jmpq   *0x20050c(%rip)        # 0x6008e8                    │
   │0x4003dc                                nopl   0x0(%rax)                                            │
   │0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)        # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;     │
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现这个地址就是在&lt;code&gt;puts@plt&lt;/code&gt;的上面，并且也是为了保证和普通&lt;code&gt;plt&lt;/code&gt;入口项目大小(&lt;code&gt;0x10&lt;/code&gt;)，其末尾还用0补齐了(&lt;code&gt;nopl   0x0(%rax)&lt;/code&gt;)。我们重点看一下前面两句。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pushq  0x20050a(%rip)        # 0x6008e0&lt;/code&gt;，这里push了一个地址，这个地址是干嘛的？我们使用&lt;code&gt;gdb&lt;/code&gt;看一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) x /16x 0x6008e0
0x6008e0:       0xf7ffe1a8      0x00007fff      0xf7df02b0      0x00007fff
0x6008f0 &amp;lt;puts@got.plt&amp;gt;:        0x004003e6      0x00000000      0xf7a52a50      0x00007fff
0x600900 &amp;lt;__gmon_start__@got.plt&amp;gt;:      0x00400406      0x00000000      0x00000000      0x00000000
0x600910:       0x00000000      0x00000000      0x00000000      0x00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个地址其实就是&lt;code&gt;got&lt;/code&gt;中的一项，并且在所有普通符号&lt;code&gt;got&lt;/code&gt;的前面。那么目前栈上的元素是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| 0x00007ffff7ffe1a8 |
| 0x0                |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来到是&lt;code&gt;jmpq   *0x20050c(%rip)&lt;/code&gt; 这个地址也是在plt上，紧挨着上面push的地址，值为&lt;code&gt;0x00007ffff7df02b0&lt;/code&gt;，我们可以继续&lt;code&gt;stepi&lt;/code&gt;进去，也可以
通过&lt;code&gt;disassemble 0x00007ffff7df02b0&lt;/code&gt;查看。或者，使用&lt;code&gt;info symbol 0x00007ffff7df02b0&lt;/code&gt;直接查看。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) info symbol 0x00007ffff7df02b0
_dl_runtime_resolve in section .text of /lib64/ld-linux-x86-64.so.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里可以看出，这是属于&lt;code&gt;ld-linux-x86-64.so.2&lt;/code&gt;里面的一个方法。这个so属于&lt;code&gt;glibc&lt;/code&gt;的一部分，我们可以下载&lt;a href=&#34;ftp://ftp.gnu.org/gnu/glibc&#34;&gt;glibc&lt;/a&gt;来查看。最终我们找到了这个符号定义文件，
其位置在&lt;code&gt;sysdeps/x86_64/dl-trampoline.S&lt;/code&gt;，内容如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt; 28     .globl _dl_runtime_resolve
 29     .type _dl_runtime_resolve, @function
 30     .align 16
 31     cfi_startproc
 32 _dl_runtime_resolve:
 33     cfi_adjust_cfa_offset(16) # Incorporate PLT
 34     subq $56,%rsp
 35     cfi_adjust_cfa_offset(56)
 36     movq %rax,(%rsp)    # Preserve registers otherwise clobbered.
 37     movq %rcx, 8(%rsp)
 38     movq %rdx, 16(%rsp)
 39     movq %rsi, 24(%rsp)
 40     movq %rdi, 32(%rsp)
 41     movq %r8, 40(%rsp)
 42     movq %r9, 48(%rsp)
 43     movq 64(%rsp), %rsi # Copy args pushed by PLT in register.
 44     movq 56(%rsp), %rdi # %rdi: link_map, %rsi: reloc_index
 45     call _dl_fixup      # Call resolver.
 46     movq %rax, %r11     # Save return value
 47     movq 48(%rsp), %r9  # Get register content back.
 48     movq 40(%rsp), %r8
 49     movq 32(%rsp), %rdi
 50     movq 24(%rsp), %rsi
 51     movq 16(%rsp), %rdx
 52     movq 8(%rsp), %rcx
 53     movq (%rsp), %rax
 54     addq $72, %rsp      # Adjust stack(PLT did 2 pushes)
 55     cfi_adjust_cfa_offset(-72)
 56     jmp *%r11       # Jump to function address.
 57     cfi_endproc
 58     .size _dl_runtime_resolve, .-_dl_runtime_resolve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从43行开始是我们的逻辑。43行取出了我们刚刚push的第一个参数，就是&lt;code&gt;$0x0&lt;/code&gt;，放到&lt;code&gt;%rsi&lt;/code&gt;中，然后是我们push的第二个参数，&lt;code&gt;0x00007ffff7ffe1a8&lt;/code&gt;到&lt;code&gt;%rsi&lt;/code&gt;中。
为什么是这两个寄存器呢？我们&lt;code&gt;man syscall&lt;/code&gt;一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       arch/ABI   arg1   arg2   arg3   arg4   arg5   arg6   arg7
       ──────────────────────────────────────────────────────────
       x86_64     rdi    rsi    rdx    r10    r8     r9     -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出linux下的函数传参方式， 那么&lt;code&gt;%rdi&lt;/code&gt;就是参数1，而&lt;code&gt;%rsi&lt;/code&gt;就是参数2了。接下来是&lt;code&gt;call _dl_fixup&lt;/code&gt;，这个函数返回值就是指向&lt;code&gt;puts&lt;/code&gt;存储地址位置的指针了，后面可以看到
代码中将这个指针保存到了&lt;code&gt;%r11&lt;/code&gt;，然后&lt;code&gt;jmp *%r11&lt;/code&gt;。完成了一次函数调用，下面我们来看看&lt;code&gt;_dl_fixup&lt;/code&gt;做了些什么。同样，这个函数也是&lt;code&gt;gblic&lt;/code&gt;中定义的，位置在&lt;code&gt;elf/dl-runtime.c&lt;/code&gt;中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;59 DL_FIXUP_VALUE_TYPE
60 __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE
61 _dl_fixup (
62 # ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS
63        ELF_MACHINE_RUNTIME_FIXUP_ARGS,
64 # endif
65        struct link_map *l, ElfW(Word) reloc_arg)
66 {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从函数原型我们可以看出，之前&lt;code&gt;push&lt;/code&gt;的两个参数分别是&lt;code&gt;link_map&lt;/code&gt;和&lt;code&gt;reloc_arg&lt;/code&gt;，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt; 67   const ElfW(Sym) *const symtab
 68     = (const void *) D_PTR (l, l_info[DT_SYMTAB]);
 69   const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);
 70 
 71   const PLTREL *const reloc
 72     = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
 73   const ElfW(Sym) *sym = &amp;amp;symtab[ELFW(R_SYM) (reloc-&amp;gt;r_info)];
 74   void *const rel_addr = (void *)(l-&amp;gt;l_addr + reloc-&amp;gt;r_offset);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里做了一下转型，那么&lt;code&gt;symtab&lt;/code&gt;和&lt;code&gt;strtab&lt;/code&gt;分别是对于&lt;code&gt;section&lt;/code&gt;的地址，而&lt;code&gt;reloc_addr&lt;/code&gt;就是我们&lt;code&gt;got&lt;/code&gt;中的&lt;code&gt;puts@got.plt&lt;/code&gt;的地址。接下来就是符号解析过程了，
后面可能会有文章来解释这个过程。当找到目标地址后&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//elf/dl-runtime.c
148   return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);
//sysdeps/x86_64/dl-machine.h
205 static inline ElfW(Addr)
206 elf_machine_fixup_plt (struct link_map *map, lookup_t t,
207                const ElfW(Rela) *reloc,
208                ElfW(Addr) *reloc_addr, ElfW(Addr) value)
209 {
210   return *reloc_addr = value;
211 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;value&lt;/code&gt;就是目标函数地址，也就是&lt;code&gt;puts&lt;/code&gt;的真正地址，代码中设置其到了&lt;code&gt;puts@got.plt&lt;/code&gt;的位置并返回。&lt;/p&gt;

&lt;p&gt;以上就是第一次调用&lt;code&gt;puts&lt;/code&gt;的过程了，当第二次调用&lt;code&gt;puts&lt;/code&gt;时，由于&lt;code&gt;puts@got.plt&lt;/code&gt;已经有了正确的地址，所以&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;  &amp;gt;│0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)        # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;    │
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就直接跳转到正确的&lt;code&gt;puts&lt;/code&gt;位置，完成了函数调用。所以，&lt;code&gt;linux&lt;/code&gt;下的这种懒绑定方式实现了在不使用符号的时候不解析，而需要使用的时候
只在第一步开销比较大，后面的调用开销无非多了一次跳转和一次寻址操作而已。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 集成 Mathjax和graphviz</title>
      <link>http://sysfork.com/post/integrate-mathjax-viz-with-hugo/</link>
      <pubDate>Fri, 02 Sep 2016 09:41:17 +0800</pubDate>
      
      <guid>http://sysfork.com/post/integrate-mathjax-viz-with-hugo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;是一个比&lt;a href=&#34;https://hexo.io&#34;&gt;hexo&lt;/a&gt;更简单易用的静态页面生成工具，其只有一个可执行文件，部署环境简单，本博客就是基于hugo构建的。&lt;/p&gt;

&lt;p&gt;我们在写博客的时候经常应用到公式和图表，这分别可以使用&lt;a href=&#34;https://www.mathjax.org/&#34;&gt;mathjax&lt;/a&gt;和&lt;a href=&#34;https://github.com/mdaines/viz.js&#34;&gt;viz.js&lt;/a&gt;实现。hugo并没有提供
内置的支持，所以需要我们自己写相关的支持。&lt;/p&gt;

&lt;p&gt;由于并不是所有的文章都需要mathjax和viz.js，所以需要按需使用，这个可以在每个post的前言上定义&lt;code&gt;plugins&lt;/code&gt;变量，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title = &amp;quot;Hugo 集成 Mathjax和graphviz&amp;quot;
plugins = [&amp;quot;mathjax&amp;quot;, &amp;quot;viz&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再&lt;code&gt;partials&lt;/code&gt;目录下添加一个&lt;code&gt;post_plugins.html&lt;/code&gt;，并在&lt;code&gt;post/single.html&lt;/code&gt;引入这个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ partial &amp;quot;post_plugins.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;post_plugins.html&lt;/code&gt;文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;plugins&amp;quot; }}
    {{ range .Params.plugins }}
        {{ $path := . | printf &amp;quot;post_plugins/%s.html&amp;quot;}}
        {{ partial $path }}
    {{ end }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;逻辑即通过便利&lt;code&gt;plugins&lt;/code&gt;参数内容，然后引入对应的html文件。在目前的这个例子中，我们使用了mathjax和viz。其中&lt;code&gt;post_plugins/mathjax.html&lt;/code&gt;的内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.bootcss.com/mathjax/2.6.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
MathJax.Hub.Queue(function() {
  var all = MathJax.Hub.getAllJax(), i;
  for(i = 0; i &amp;lt; all.length; i += 1) {
      all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
  }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就能使用&lt;code&gt;\$&lt;/code&gt;或&lt;code&gt;\$\$&lt;/code&gt;来编写公式了，最终示例表现如下：
$$ [ \left [ &amp;#8211; \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi ]$$&lt;/p&gt;

&lt;p&gt;对于&lt;code&gt;post_plugins/viz.html&lt;/code&gt;内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.bootcss.com/viz.js/1.3.0/viz.js&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function(){
    var vizPrefix = &amp;quot;language-viz-&amp;quot;;
    Array.prototype.forEach.call(document.querySelectorAll(&amp;quot;[class^=&amp;quot; + vizPrefix + &amp;quot;]&amp;quot;), function(x){
        var engine;
        x.getAttribute(&amp;quot;class&amp;quot;).split(&amp;quot; &amp;quot;).forEach(function(cls){
            if (cls.startsWith(vizPrefix)) {
                engine = cls.substr(vizPrefix.length);
            }
        });
        var image = new DOMParser().parseFromString(Viz(x.innerText, {format:&amp;quot;svg&amp;quot;, engine:engine}), &amp;quot;image/svg+xml&amp;quot;);
        x.parentNode.insertBefore(image.documentElement, x);
        x.style.display = &#39;none&#39;
    });
})();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码的作用，就是将codeblock类型为language-viz-xxx的自动渲染为svg图像显示，以下是示例：&lt;/p&gt;

&lt;p&gt;原始内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```viz-dot
    digraph g { a -&amp;gt; b; }
    ```

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34;&gt;    digraph g { a -&amp;gt; b; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同理，对于其他需要特殊支持的格式或表现，都可以通过添加post_plugins来实现。以上代码都在本网站的&lt;a href=&#34;https://github.com/usbuild/site.git&#34;&gt;github&lt;/a&gt;上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lua Table中HashMap介绍</title>
      <link>http://sysfork.com/post/lua-hashtable-introduction/</link>
      <pubDate>Thu, 01 Sep 2016 17:40:08 +0800</pubDate>
      
      <guid>http://sysfork.com/post/lua-hashtable-introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.lua.org/pil/2.5.html&#34;&gt;Table&lt;/a&gt; 在Lua中有着极其重要的应用，从核心语言实现，如&lt;a href=&#34;https://en.wikipedia.org/wiki/String_interning&#34;&gt;short string intern&lt;/a&gt;，
到利用&lt;a href=&#34;https://www.lua.org/pil/13.html&#34;&gt;metatable&lt;/a&gt;实现的&lt;a href=&#34;lua-users.org/wiki/LuaClassesWithMetatable&#34;&gt;class&lt;/a&gt;，table几乎无所不能。如此高频度地利用也就意味着lua必须要有一个高效的
table实现。&lt;/p&gt;

&lt;p&gt;很多语言提供了array和associative array两种数据结构。array是指以某个指定的最小整数下标(一般是0)开始的连续存储的数据结构，它有vector、list、array、ArrayList等多种名称；associative array，中文
也叫关联数组，即将一对key/pair之间关联起来，它一般也被称为map、dict等。Lua并不提供array，因为数组本身也是一种特殊的关联数组。但是从内部表示上，array和map有着极大的不同，array只需要一块连续的
内存即可实现，而map则有多种实现。Lua为了效率，将一部分整数下标的元素存储在array part中，而将其他元素存储在hashmap中，实现在外部接口不变的情况下实现了效率的最大化。array部分没有什么特别需要
优化的，其就是一整块连续的内存，存储和读取的时间复杂度都是O(1)，而hashmap的实现称为了lua table设计的重点。&lt;/p&gt;

&lt;p&gt;map有多种实现手段，在stl中，默认的map使用的是红黑树，存储和读取的时间复杂度都是O(logn)；虽然红黑树的表现十分稳定，但是实现比较复杂而且无法满足极端性能要求，
C++11中添加新的&lt;a href=&#34;http://en.cppreference.com/w/cpp/container/unordered_map&#34;&gt;unordered_map&lt;/a&gt;，其实现就是使用了一个hashmap。hashmap的基本流程是使用一个hash函数来将
一个key映射到一块连续内存中，实现在理想情况下访问和删除接近O(1)的时间复杂度。&lt;/p&gt;

&lt;p&gt;由于一般key的取值范围大于hashmap slot数目，所以不可避免地出现冲突的状况。在教科书中，解决这种冲突一般有两种方法：&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Separate_chaining&#34;&gt;链表法&lt;/a&gt;
和&lt;a href=&#34;https://en.wikipedia.org/wiki/Open_addressing&#34;&gt;开放寻址法&lt;/a&gt;。链表法的实现比较简单，将冲突的元素使用链表链接起来即可；而开放寻址法则需要多次计算，直至找到一个没有冲突的slot为止。
这两者都有自己的优缺点，链表法由于使用了链表，无法充分利用CPU缓存，并且实现深拷贝难度较大；而开放寻址法无法实现删除元素的功能，并且当元素密度比较大时，效率非常低。&lt;/p&gt;

&lt;p&gt;Lua table使用了一个折中的方案，叫做&lt;a href=&#34;https://en.wikipedia.org/wiki/Coalesced_hashing&#34;&gt;Coalesced_hashing&lt;/a&gt;，结合使用了链表法和开放寻址法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/en/4/4c/CoalescedHash.jpg&#34; alt=&#34;Coalesced_hashing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当插入一个元素时，定义其原本应该在的位置为mainposition，如果mainpoisition对应的slot是空的，则直接插入；如果非空，看看在那个位置上的元素的mainposition是不是当前的slot，如果不是的
话，则将其移动到任意一个空的slot(位置A)，然后将当前的元素插入到mainposition位置，并将当前的next字段设置成位置A，形成链表。如果占用元素mainposition就是当前位置，则将待插入的
元素插入到任意一个空的位置上，并链接到占用元素的后面。&lt;/p&gt;

&lt;p&gt;通过上面的过程，实现了所有的元素都尽量保存在mainposition上，当查找的时候也能使用更少的次数来找到元素位置。这对元素本来就在hashmap中，效率是比较高的。但是，当元素不在hashmap中，查找的代价
比较高。&lt;/p&gt;

&lt;p&gt;lua table的代码实现在&lt;a href=&#34;https://www.lua.org/source/5.3/ltable.c.html&#34;&gt;这里&lt;/a&gt;，实现非常简洁明了，也不是很难懂，但是对于平时经常使用lua的同学来说读一读还是很有必要的。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>