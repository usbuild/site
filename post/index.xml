<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sys🔱fork</title>
    <link>http://sysfork.com/post/</link>
    <description>Recent content in Posts on sys🔱fork</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 01 May 2017 22:30:00 +0800</lastBuildDate>
    <atom:link href="http://sysfork.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>一种在elf中集成脚本文件的方案</title>
      <link>http://sysfork.com/post/a-solution-for-elf-integrate-scripts/</link>
      <pubDate>Mon, 01 May 2017 22:30:00 +0800</pubDate>
      
      <guid>http://sysfork.com/post/a-solution-for-elf-integrate-scripts/</guid>
      <description>

&lt;p&gt;进行游戏服务器开发时，我们将&lt;code&gt;C++&lt;/code&gt;的部分称之为引擎层，而&lt;code&gt;lua&lt;/code&gt;称之为脚本层。但是往往有些核心逻辑是各个游戏公用的，
或者说有些引擎层的代码用&lt;code&gt;C++&lt;/code&gt;写起来十分麻烦，我们还是会使用&lt;code&gt;lua&lt;/code&gt;来编写。这就带来了一些问题，我们的游戏目录结构如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├─bin               // 可执行文件
└─scripts           // 脚本目录，lua文件
    ├─framework     // 核心lua文件，各个项目公用的
    └─server        // 游戏逻辑lua文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;scripts/framework&lt;/code&gt;是各个项目公用的，并且和&lt;code&gt;bin&lt;/code&gt;目录中的可执行文件同时发布和更新。所以有一个想法，就是将&lt;code&gt;framework&lt;/code&gt;中
的lua文件集成到可执行文件中，减少维护的成本。&lt;/p&gt;

&lt;h1 id=&#34;1-文件存储&#34;&gt;1. 文件存储&lt;/h1&gt;

&lt;p&gt;下面是elf文件的示意图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Elf-layout--en.svg/260px-Elf-layout--en.svg.png&#34; alt=&#34;elf&#34; /&gt;&lt;/p&gt;

&lt;p&gt;elf文件有多个section，除了一些预定义的section如&lt;code&gt;.rodata&lt;/code&gt;、&lt;code&gt;.text&lt;/code&gt;、&lt;code&gt;.init&lt;/code&gt;等，我们也可以定义一些自己的section。所以我们可以将所需要的lua文件
放进这个section中，在执行的时候动态读出来，实现目的。我们可以使用&lt;a href=&#34;https://linux.die.net/man/1/objcopy&#34;&gt;objcopy&lt;/a&gt;命令来实现创建自定义section的功能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objcopy infile.out --add-section .lua-data=section_file outfile.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而&lt;code&gt;framework&lt;/code&gt;里面有多个文件，而且包含嵌套的文件夹，我们需要一个将文件夹变成单个文件的功能，类似于&lt;a href=&#34;https://linux.die.net/man/1/tar&#34;&gt;tar&lt;/a&gt;。虽然创建
section时使用&lt;code&gt;tar&lt;/code&gt;命令是简单的，但是在读取的时候需要一些第三方的库来支持，这是比较麻烦的。而由于我们的目录中只包含&lt;code&gt;lua&lt;/code&gt;文件，所以可以简化设计。
首先空文件夹对于我们是无意义的，只需要&lt;code&gt;lua&lt;/code&gt;文件就可以。所以最终我们得到如下的表:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;┌────────────────────┐
│ libs/json.lua      │
├────────────────────┤
│ core/entity.lua    │
├────────────────────┤
│ app/game.lua       │
├────────────────────┤
│ libs/bson.lua      │
└────────────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以按照如下的格式转换成单个文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;┌────────┬───────────┐
│name_len│content_len│
├────────┴───────────┤
│ core.entity        │
├────────────────────┤
│name_len│content_len│
├────────────────────┤
│ libs.bson          │
├────────────────────┤
│ .................  │
└────────────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;name_len&lt;/code&gt;为文件名的长度，这里直接转换成了lua中&lt;code&gt;require&lt;/code&gt;的格式，使用点符号。&lt;code&gt;content_len&lt;/code&gt;是文件内容的长度，即文件的具体内容长度。最后我们可以使用&lt;code&gt;zip&lt;/code&gt;指令
将这部分内容压缩存储在&lt;code&gt;elf&lt;/code&gt;文件中。完整的代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
#coding: utf-8

import os, struct, StringIO, zlib, subprocess, sys, tempfile, argparse

argParser = argparse.ArgumentParser()

argParser.add_argument(&amp;quot;luafolder&amp;quot;, type=str)
argParser.add_argument(&amp;quot;exe&amp;quot;, type=str)
argParser.add_argument(&amp;quot;out&amp;quot;, type=str)

args = argParser.parse_args()

files = []

path = args.luafolder

for (dirpath, dirname, filenames) in os.walk(path):
    dirp = dirpath[len(path):]
    if dirp:
        if dirp[-1] != &amp;quot;/&amp;quot;:
            dirp += &amp;quot;/&amp;quot;

        while dirp[0] == &amp;quot;/&amp;quot;:
            dirp = dirp[1:]

    files.extend([dirp + x for x in filenames])

output = StringIO.StringIO()

for fpath in files:
    realp = path + &amp;quot;/&amp;quot; + fpath
    filesize = os.path.getsize(realp)

    if fpath.endswith(&amp;quot;.lua&amp;quot;):
        fpath = fpath[:-4]
    elif fpath.endswith(&amp;quot;.luac&amp;quot;):
        fpath = fpath[:-5]
    else:
        continue

    package_pattern = fpath.replace(&amp;quot;/&amp;quot;, &amp;quot;.&amp;quot;)
    package_pattern = &amp;quot;pg.&amp;quot; + package_pattern
    with open(realp, &amp;quot;rb&amp;quot;) as rf:
        content = rf.read()
        output.write(struct.pack(&amp;quot;=hL&amp;quot;, len(package_pattern), len(content)))
        output.write(package_pattern)
        output.write(content)

f = tempfile.NamedTemporaryFile()

outdata = output.getvalue()
f.write(struct.pack(&amp;quot;=L&amp;quot;, len(outdata)))
f.write(zlib.compress(output.getvalue()))
f.flush()

subprocess.call(&amp;quot;objcopy %s --remove-section .lua-data&amp;quot;%(args.exe, ), shell=True)
subprocess.call(&amp;quot;objcopy %s --add-section .lua-data=%s %s&amp;quot;%(args.exe, f.name, args.out), shell=True)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-文件内容的读取&#34;&gt;2. 文件内容的读取&lt;/h1&gt;

&lt;p&gt;我们需要使用&lt;code&gt;elf.h&lt;/code&gt;文件来读取文件内容。根据上述的格式示意图，&lt;code&gt;elf&lt;/code&gt;文件开头的是Header，其格式为&lt;code&gt;ElfXX_Ehdr&lt;/code&gt;，
我们可以直接读取文件内容到内存。然后读取&lt;code&gt;e_shoff&lt;/code&gt;字段获得section header的位置，定位到位置并依次读取内容到&lt;code&gt;ElfXX_Shdr&lt;/code&gt;
结构体中，然后通过各个entry的&lt;code&gt;sh_name&lt;/code&gt;得到最终section，然后读取文件达到目的。完整代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static std::map&amp;lt;std::string, std::string&amp;gt; readElfLuaData(const std::string &amp;amp;filepath) {
    std::map&amp;lt;std::string, std::string&amp;gt; files;
#if __x86_64__
    typedef Elf64_Ehdr ELF_EHDR;
    typedef Elf64_Shdr ELF_SHDR;
#else
    typedef Elf32_Ehdr ELF_EHDR;
    typedef Elf32_Shdr ELF_SHDR;
#endif

    std::ifstream ifs(filepath);

    ELF_EHDR hdr;
    ifs.read(reinterpret_cast&amp;lt;char *&amp;gt;(&amp;amp;hdr), sizeof(hdr));

    std::vector&amp;lt;ELF_SHDR&amp;gt; sh_tables(hdr.e_shnum);
    ifs.seekg(static_cast&amp;lt;long&amp;gt;(hdr.e_shoff));

    for (size_t i = 0; i &amp;lt; hdr.e_shnum; ++i) {
        ifs.read(reinterpret_cast&amp;lt;char *&amp;gt;(&amp;amp;sh_tables[i]), sizeof(sh_tables[i]));
    }

    // read shstr

    std::vector&amp;lt;char&amp;gt; shstr(sh_tables[hdr.e_shstrndx].sh_size);
    ifs.seekg(static_cast&amp;lt;long&amp;gt;(sh_tables[hdr.e_shstrndx].sh_offset));
    ifs.read(shstr.data(), static_cast&amp;lt;long&amp;gt;(shstr.size()));

    ELF_SHDR *lua_sh = nullptr;

    for (size_t i = 0; i &amp;lt; hdr.e_shnum; ++i) {
        char *name = shstr.data() + sh_tables[i].sh_name;
        if (strcmp(name, &amp;quot;.lua-data&amp;quot;) == 0) {
            lua_sh = &amp;amp;sh_tables[i];
            break;
        }
    }

    if (lua_sh) {
        std::vector&amp;lt;char&amp;gt; buf(lua_sh-&amp;gt;sh_size);
        ifs.seekg(static_cast&amp;lt;long&amp;gt;(lua_sh-&amp;gt;sh_offset));
        ifs.read(buf.data(), static_cast&amp;lt;std::streamsize&amp;gt;(buf.size()));

        size_t idx = 0;
#define READ_TO(TARGET, SIZE)                                                                      \
    memcpy(TARGET, buf.data() + idx, SIZE);                                                        \
    idx += SIZE;

        uint32_t raw_len = 0;
        READ_TO(&amp;amp;raw_len, sizeof(raw_len));

        std::vector&amp;lt;char&amp;gt; tmp(raw_len);
        uLongf dest_len = tmp.size();
        uncompress(reinterpret_cast&amp;lt;Bytef *&amp;gt;(tmp.data()), &amp;amp;dest_len,
                   reinterpret_cast&amp;lt;Bytef *&amp;gt;(buf.data() + idx), buf.size() - idx);

        buf.swap(tmp);
        idx = 0;

        while (idx &amp;lt; dest_len) {
            uint16_t name_len;
            uint32_t content_len;
            READ_TO(&amp;amp;name_len, sizeof(name_len));
            READ_TO(&amp;amp;content_len, sizeof(content_len));
            std::string filename(name_len, 0), content(content_len, 0);
            READ_TO(&amp;amp;*filename.begin(), filename.size());
            READ_TO(&amp;amp;*content.begin(), content.size());
            files.emplace(std::piecewise_construct, std::forward_as_tuple(std::move(filename)),
                          std::forward_as_tuple(std::move(content)));
        }
#undef READ_TO
    }
    return files;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来便可以通过添加到&lt;code&gt;package.preload&lt;/code&gt;实现在lua中调用这些文件的目的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用C&#43;&#43; map实现注册回调的功能</title>
      <link>http://sysfork.com/post/cpp-function-container/</link>
      <pubDate>Sat, 29 Apr 2017 15:38:38 +0800</pubDate>
      
      <guid>http://sysfork.com/post/cpp-function-container/</guid>
      <description>

&lt;p&gt;在&lt;code&gt;C++/lua&lt;/code&gt;混合编程中，往往存在需要回调的情况。比如在游戏中，逻辑进程中的脚本需要一个数据库访问操作，如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;dbmgr.query({name=&amp;quot;hello&amp;quot;}, function(ret)
-- do something
end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于&lt;code&gt;dbmgr.query&lt;/code&gt;是异步操作，这条语句是立即返回的。内部执行过程中是通过向&lt;code&gt;dbmgr&lt;/code&gt;进程发送一个&lt;code&gt;query&lt;/code&gt;请求，然后逻辑进程继续执行。当&lt;code&gt;dbmgr&lt;/code&gt;收到请求后，其执行数据库查询操作，得到
结果然后也是通过网络将其发送给逻辑进程。逻辑进程收到结果后调用到&lt;code&gt;lua&lt;/code&gt;的回调函数里。&lt;/p&gt;

&lt;p&gt;这里有一个简化方案，如果时仅仅针对&lt;code&gt;lua&lt;/code&gt;的话，只需要在向&lt;code&gt;dbmgr&lt;/code&gt;进程发送请求的时候带上&lt;code&gt;lua function&lt;/code&gt;的注册ID就好了，查询到结果后返回过来就能直接调用。但是我们希望这个接口不仅仅在
&lt;code&gt;lua&lt;/code&gt;中使用，希望在&lt;code&gt;C++&lt;/code&gt;中也能调用，并且希望提供一个统一的模块来负责这类事情，该如何设计？一个简化后的问题如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;functional&amp;gt;
#include &amp;lt;map&amp;gt;

std::map&amp;lt;int, std::function&amp;lt;void(void*)&amp;gt;&amp;gt; callbacks;
int last_idx = 0;

//用于注册回调函数，需要支持各种function
template&amp;lt;typename T&amp;gt;
int addCallback(T &amp;amp;&amp;amp; t) {
}

//用于调用回调函数
template&amp;lt;typename ... ARGS&amp;gt;
void call(int idx, ARGS &amp;amp;&amp;amp; ... args) {
}

void func(int i) {}

class Functor {
public:
	void operator()(const std::string &amp;amp;s, int i) {}
};

int main() {
	int c1 = addCallback(&amp;amp;func);
	int i;
	int c2 = addCallback([i](double j) {});
	int c3 = addCallback(Functor());

	call(c1, 1);
	call(c2, 1.0);
	call(c3, std::string(&amp;quot;string&amp;quot;), 1);

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;addCallback&lt;/code&gt;的作用用于注册回调函数，参数可以是&lt;code&gt;std::function&lt;/code&gt;、&lt;code&gt;lambda&lt;/code&gt;、&lt;code&gt;functor&lt;/code&gt;、普通的函数、成员函数等等。这里为了简化处理，我们只
处理&lt;code&gt;std::function&lt;/code&gt;、&lt;code&gt;lambda&lt;/code&gt;和普通函数，其余的不再赘述。下面是一些问题：&lt;/p&gt;

&lt;h1 id=&#34;1-参数的处理&#34;&gt;1. 参数的处理？&lt;/h1&gt;

&lt;p&gt;由于我们使用的是&lt;code&gt;map&lt;/code&gt;，&lt;code&gt;value_type&lt;/code&gt;是一定的，你无法将多个不同类型的&lt;code&gt;std::function&lt;/code&gt;放进去，所以需要需要包一层，这里存储的是&lt;code&gt;std::function&amp;lt;void(void*)&amp;gt;&lt;/code&gt;，
由于是异步调用，返回值我们不关心。参数使用的是&lt;code&gt;void*&lt;/code&gt;，将类型给抹除掉了。那么参数的具体内容是什么呢？可以使用&lt;code&gt;std::tuple&lt;/code&gt;来存储，那&lt;code&gt;call&lt;/code&gt;的实现就很简单了:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template&amp;lt;typename ... ARGS&amp;gt;
void call(int idx, ARGS &amp;amp;&amp;amp; ... args) {
	auto it = callbacks.find(idx);
	if (it != callbacks.end() {
		auto tuple = std::tuple&amp;lt;ARGS...&amp;gt;(args...);
		it-&amp;gt;second(&amp;amp;tuple);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-callbacks-存储的内容是&#34;&gt;2. &lt;code&gt;callbacks&lt;/code&gt;存储的内容是？&lt;/h1&gt;

&lt;p&gt;上面的讨论中，&lt;code&gt;map&lt;/code&gt;的&lt;code&gt;value_type&lt;/code&gt;是&lt;code&gt;std::function&amp;lt;void(*)&amp;gt;&lt;/code&gt;，所以我们不能直接将外部传入的回调设置进去，需要再包一层&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template&amp;lt;typename T&amp;gt;
int addCallback(T &amp;amp;&amp;amp; t) {
    last_idx++;
    callbacks[last_idx] = [t](void *data){
        auto ptr = static_cast&amp;lt;std::tuple&amp;lt;...&amp;gt; *&amp;gt;(data); // 模板参数怎么处理？
        std::apply(t, *ptr);
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们使用了&lt;code&gt;C++17&lt;/code&gt;中的&lt;a href=&#34;http://en.cppreference.com/w/cpp/utility/apply&#34;&gt;std::apply&lt;/a&gt;，其作用就是调用函数，参数是一个&lt;code&gt;tuple&lt;/code&gt;，有兴趣的可以从源码中看看&lt;code&gt;apply&lt;/code&gt;的实现，
这里就不详细介绍了。
问题是，&lt;code&gt;tuple&lt;/code&gt;的参数如何处理？我们没法从&lt;code&gt;data&lt;/code&gt;中得到类型心系，唯一的方法就是从&lt;code&gt;T&lt;/code&gt;中获取，那如何获取呢？&lt;/p&gt;

&lt;h1 id=&#34;3-callable对象调用参数萃取&#34;&gt;3. callable对象调用参数萃取&lt;/h1&gt;

&lt;p&gt;现在的主要问题是，如何从&lt;code&gt;std::function&lt;/code&gt;、&lt;code&gt;lambda&lt;/code&gt;、普通函数等类型中提取参数信息。对于普通函数和&lt;code&gt;std::function&lt;/code&gt;我们可以通过特化来做&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template&amp;lt;typename T&amp;gt;
struct CallbackTypeHelper;

template&amp;lt;typename RET, typename ... ARGS&amp;gt;
struct CallbackTypeHelper&amp;lt;RET(*)(ARGS...)&amp;gt; {
    typedef std::tuple&amp;lt;ARGS...&amp;gt; typle_type;
}

template&amp;lt;typename RET, typename ... ARGS&amp;gt;
struct CallbackTypeHelper&amp;lt;std::function&amp;lt;RET(ARGS...)&amp;gt;&amp;gt; {
    typedef std::tuple&amp;lt;ARGS...&amp;gt; typle_type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于&lt;code&gt;lambda&lt;/code&gt;该如何处理呢？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt;作为&lt;code&gt;C++11&lt;/code&gt;中新引进的特性，其作用是实现一个匿名函数，由于捕获组的存在，其不能仅仅实现成一个&lt;code&gt;C Function&lt;/code&gt;。为了实现这个目的，编译器会生成一个匿名类，各个捕获参数即为成员
变量，为了实现可被调用，其重载了&lt;code&gt;operator()&lt;/code&gt;。根据这个思路，我们找到了获取参数的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template&amp;lt;typename T&amp;gt;
struct CallbackFunctorHelper;

template&amp;lt;typename RET, typename C, typename ... ARGS&amp;gt;
struct CallbackFunctorHelper&amp;lt;RET(C::*)(ARGS...) const&amp;gt; {
  typedef std::tuple&amp;lt;ARGS...&amp;gt; tuple_type;
};

template&amp;lt;typename RET, typename C, typename ... ARGS&amp;gt;
struct CallbackFunctorHelper&amp;lt;RET(C::*)(ARGS...)&amp;gt; {
  typedef std::tuple&amp;lt;ARGS...&amp;gt; tuple_type;
};

template &amp;lt;typename T, typename Enabled=void&amp;gt;
struct CallbackTypeHelper {
  typedef typename CallbackFunctorHelper&amp;lt;decltype(&amp;amp;std::decay&amp;lt;T&amp;gt;::type::operator())&amp;gt;::tuple_type tuple_type;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意由于参数有可能是引用，所有这里需要&lt;a href=&#34;http://en.cppreference.com/w/cpp/types/decay&#34;&gt;decay&lt;/a&gt;来处理这些引用。同时由于&lt;code&gt;lambda&lt;/code&gt;的&lt;code&gt;mutable&lt;/code&gt;属性的存在，所以&lt;code&gt;CallbackFunctorHelper&lt;/code&gt;
需要&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;non-const&lt;/code&gt;的特化。&lt;/p&gt;

&lt;p&gt;最后，由于这只是演示性质的代码，有些逻辑如成员函数等并没有考虑进去，除此之外，可以使用&lt;code&gt;enable_if&lt;/code&gt;做个单独的特化，而不需要在默认函数上写&lt;code&gt;functor&lt;/code&gt;的实现等。在实际
应用中可以修改得更加全面和优雅。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lua与C交互中的死循环检测</title>
      <link>http://sysfork.com/post/lua-c-detect-inifinite-loop/</link>
      <pubDate>Fri, 21 Apr 2017 17:37:30 +0800</pubDate>
      
      <guid>http://sysfork.com/post/lua-c-detect-inifinite-loop/</guid>
      <description>

&lt;p&gt;现在很多游戏引擎都是&lt;code&gt;C++&lt;/code&gt; + &lt;code&gt;lua&lt;/code&gt;的结构，一旦某个服务器开发人员大意写出死循环代码，很容易导致服务无响应，影响服务器稳定。所以引擎中最好能提供一个死循环的检测机制，一旦出现死循环则执行一些行为打断当前流程。&lt;/p&gt;

&lt;p&gt;死循环的检测是一个&lt;a href=&#34;https://en.wikipedia.org/wiki/Halting_problem&#34;&gt;停机问题&lt;/a&gt;。我们无法判断到底是任务执行时间过长，还是进入了真正的死循环，好在这对我们的服务来说区别并不重要。所以一个简单的判断条件是，执行时间是否超过了预定的阈值。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C++&lt;/code&gt;中集成&lt;code&gt;lua&lt;/code&gt;，调用到游戏逻辑时，一般通过&lt;a href=&#34;http://pgl.yoyo.org/luai/i/lua_pcall&#34;&gt;pcall&lt;/a&gt;，但是一旦调用了&lt;code&gt;pcall&lt;/code&gt;，代码的执行路径便进入了&lt;code&gt;lua&lt;/code&gt;的世界，除非通过信号机制才能在当前线程中中断，实现执行其他分支的目的。除此之外，&lt;code&gt;lua&lt;/code&gt;还提供了&lt;code&gt;debug.sethook&lt;/code&gt;函数，可以在执行正常逻辑中触发&lt;code&gt;hook&lt;/code&gt;，实现监测超时的功能。所以我们有以下两种方案：&lt;/p&gt;

&lt;h1 id=&#34;1-使用-debug-sethook-来实现&#34;&gt;1. 使用&lt;code&gt;debug.sethook()&lt;/code&gt;来实现&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;debug.sethook ([thread,] hook, mask [, count])
Sets the given function as a hook. The string mask and the number count describe when the hook will be called. The string mask may have the following characters, with the given meaning:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;c&amp;rdquo;: the hook is called every time Lua calls a function;
&amp;ldquo;r&amp;rdquo;: the hook is called every time Lua returns from a function;
&amp;ldquo;l&amp;rdquo;: the hook is called every time Lua enters a new line of code.
With a count different from zero, the hook is called after every count instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我们只要在执行&lt;code&gt;pcall&lt;/code&gt;之前设定类似如下的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;debug.sethook(function()error(&amp;quot;timeout&amp;quot;)end, &amp;quot;c&amp;quot;, 10000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理论上只要代码指令数超过10000条就能触发&lt;code&gt;error&lt;/code&gt;。好像挺完美的。&lt;/p&gt;

&lt;p&gt;But，在&lt;code&gt;luajit&lt;/code&gt;下这条不一定成立，因为执行的逻辑被&lt;code&gt;jit&lt;/code&gt;编译了，而在这种情况下，&lt;code&gt;hook&lt;/code&gt;是不会触发的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your program is running in a tight loop and never falls back to the interpreter, the debug hook never runs and can&amp;rsquo;t throw the &amp;ldquo;interrupted!&amp;rdquo; error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是还有一个未公开的编译选项&lt;code&gt;LUAJIT_ENABLE_CHECKHOOK&lt;/code&gt;，在&lt;code&gt;lj_record.c&lt;/code&gt;文件的最后面，上面写道&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regularly check for instruction/line hooks from compiled code and
exit to the interpreter if the hooks are set.&lt;/p&gt;

&lt;p&gt;This is a compile-time option and disabled by default, since the
hook checks may be quite expensive in tight loops.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看似可以，但是注意，如果&lt;code&gt;hook&lt;/code&gt;被设置了，则执行的代价是比较昂贵的。对于游戏而言，大部分的时间都在&lt;code&gt;lua&lt;/code&gt;层，而为了监测死循环，几乎
要在所有的lua执行过程中设置&lt;code&gt;hook&lt;/code&gt;，这是不太容易接受的。好在下面的注释提到了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can set the instruction hook via lua_sethook() with a count of 1
from a signal handler or another native thread. Please have a look
at the first few functions in luajit.c for an example (Ctrl-C handler).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;嗯，看样子只能使用第二种方案了。&lt;/p&gt;

&lt;h1 id=&#34;2-使用信号来实现&#34;&gt;2. 使用信号来实现&lt;/h1&gt;

&lt;p&gt;在lua的命令行程序中我们可以通过&lt;code&gt;Ctrl-C&lt;/code&gt;中断正在执行的程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;  for i=1,10000000 do sum = sum + i end
^Cinterrupted!
stack traceback:
        stdin:1: in main chunk
        [C]: in ?

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仔细看&lt;code&gt;lua.c&lt;/code&gt;文件，可以看到以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;static void lstop (lua_State *L, lua_Debug *ar) {
  (void)ar;  /* unused arg. */
  lua_sethook(L, NULL, 0, 0);
  luaL_error(L, &amp;quot;interrupted!&amp;quot;);
}


static void laction (int i) {
  signal(i, SIG_DFL); /* if another SIGINT happens before lstop,
                              terminate process (default action) */
  lua_sethook(globalL, lstop, LUA_MASKCALL | LUA_MASKRET | LUA_MASKCOUNT, 1);
}

// ....
//in docall
signal(SIGINT, laction);
status = lua_pcall(L, narg, (clear ? 0 : LUA_MULTRET), base);
signal(SIGINT, SIG_DFL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯，在执行&lt;code&gt;pcall&lt;/code&gt;之前设置了信号处理函数，捕捉&lt;code&gt;Ctrl-C&lt;/code&gt;的信号，一旦发生，则立马调用&lt;code&gt;lua_sethook&lt;/code&gt;函数，指定在执行下一行代码时调用&lt;code&gt;lstop&lt;/code&gt;，而在&lt;code&gt;lstop&lt;/code&gt;中就直接抛出&lt;code&gt;error&lt;/code&gt;了。所以问题是 &lt;strong&gt;&lt;code&gt;lua_sethook&lt;/code&gt;是可以在信号处理函数中调用的&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;答案：是&lt;/p&gt;

&lt;p&gt;从源码中可以看到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* This function can be called asynchronously (e.g. during a signal). */
LUA_API int lua_sethook(lua_State *L, lua_Hook func, int mask, int count)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除此之外，从&lt;code&gt;luajit&lt;/code&gt;的源码注释来看，不仅仅在信号处理函数中，在其他线程中也能被调用
&amp;gt; from a signal handler or another native thread.&lt;/p&gt;

&lt;p&gt;所以，这种方案是可行的。因此，对于单线程程序而言，可以通过设置&lt;code&gt;alarm&lt;/code&gt;来实现超时设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alarm(10);// trigger after 10s
signal(SIGALRM, laction);
status = lua_pcall(L, narg, (clear ? 0 : LUA_MULTRET), base);
alarm(0)
signal(SIGALRM, SIG_DFL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而对于多线程程序，可以直接启一个定时器来来&lt;code&gt;check&lt;/code&gt;，而不用使用很恶心的信号。&lt;/p&gt;

&lt;p&gt;值得一提的是，使用这种方式触发超时&lt;code&gt;error&lt;/code&gt;可以很轻易地在&lt;code&gt;pcall&lt;/code&gt;中捕获，从而而已实现堆栈的打印等功能，方便查找和定位问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>浅谈C&#43;&#43;中的地址对齐</title>
      <link>http://sysfork.com/post/about-cpp-alignment/</link>
      <pubDate>Sun, 25 Sep 2016 09:13:27 +0800</pubDate>
      
      <guid>http://sysfork.com/post/about-cpp-alignment/</guid>
      <description>

&lt;h1 id=&#34;1-动机&#34;&gt;1. 动机&lt;/h1&gt;

&lt;p&gt;最近在整理C++11中的新增特性，其中有一个&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/alignas&#34;&gt;alignas&lt;/a&gt;关键字。在学习这个的时候顺便研究了
下C/C++中的字节对齐问题，发现有很多可以探索的地方。&lt;/p&gt;

&lt;h1 id=&#34;2-什么是地址对齐&#34;&gt;2. 什么是地址对齐&lt;/h1&gt;

&lt;p&gt;参考维基百科的解释：&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_structure_alignment&#34;&gt;Data_structure_alignment&lt;/a&gt;。所谓地址对齐，即某个地址A满足是n的倍数，其中n是2的幂次方(如1、2、4、8等等)。如果用二进制表示的话，那么
A的末尾至少有&lt;code&gt;log&lt;sub&gt;2&lt;/sub&gt;n&lt;/code&gt;个0(废话)。当我们说到某个变量是n字节对齐的时候，其意思是指这个变量的地址是对齐的。&lt;/p&gt;

&lt;h1 id=&#34;3-地址对齐的意义&#34;&gt;3. 地址对齐的意义&lt;/h1&gt;

&lt;p&gt;从我们编写的程序来看，CPU好像可以访问内存中的任意位置；但是实际上CPU往往是按照块为基本单位访问内存的。如果某个变量的起始地址位于某个块的的起始处，则只需较少的次数便能完成读取。
比如在某个CPU中，其每次取内存的大小为8字节，对于一个8字节的long类型变量，如果该变量的地址是8的倍数，那么每次load这个long变量只需要一次操作。如果不是8的倍数则需要两次，影响了效率。
更多的数据测评参考&lt;a href=&#34;http://www.ibm.com/developerworks/library/pa-dalign/&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;4-自然对齐&#34;&gt;4. 自然对齐&lt;/h1&gt;

&lt;p&gt;为了保证运行效率，编译器在生成可执行程序的时候会对我们使用的变量自动对齐。这个值往往就是变量类型的size或是能被size整除。如char的自然对齐地址为1，而int则是4或8。但是，这也是有上限的。在&lt;code&gt;C++11&lt;/code&gt;中，
上限为&lt;code&gt;std::max_align_t&lt;/code&gt;的对齐值，在大多数平台上，这个类型都被定义为&lt;code&gt;long double&lt;/code&gt;，因为这往往也是最大的标量。当我们定义数组时，如 &lt;code&gt;TYPE f[10]&lt;/code&gt;，其中第N个元素的地址为&lt;code&gt;f + sizeof(TYPE) * N&lt;/code&gt;。
如果&lt;code&gt;TYPE&lt;/code&gt;的对齐值能被&lt;code&gt;sizeof(TYPE)&lt;/code&gt;整除的话，则能保证只要数组开始地址时对齐的，那么所有元素都是对齐的。&lt;/p&gt;

&lt;h1 id=&#34;4-变量的内存对齐控制&#34;&gt;4. 变量的内存对齐控制&lt;/h1&gt;

&lt;p&gt;GCC有一个自己的扩展来控制变量的对齐内存，&lt;code&gt;__attribute__((aligned()))&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int __attribute__((aligned(16))) i;                          //(1)
int j __attribute__((aligned(16)));                          //(2)
struct S { short f[3]; } __attribute__ ((aligned (8)));      //(3)
typedef int more_aligned_int __attribute__ ((aligned (8)));  //(4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(1)和(2)声明了两个变量，指定这两个变量的对齐大小为16；(3)和(4)则作用与类型，使得S和&lt;code&gt;more_aligned_int&lt;/code&gt;类型的变量对齐都是8。
这个对齐的大小可以为任意2的幂次数，但是有最大上限，在我的x86_64的ubuntu上这个值是2&lt;sup&gt;28&lt;/sup&gt;。按照GCC&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc-3.3/gcc/Type-Attributes.html&#34;&gt;官方文档&lt;/a&gt;中的解释，
这个attribute并不能保证变量的对齐一定是指定的大小，而是提供了一个最小值。但是实测的时候，对于标量，其提供的值就是最后对齐的值。如int的自然对齐为4，当我们使用&lt;code&gt;__attribute__&lt;/code&gt;指定时，无论时&lt;code&gt;1&lt;/code&gt;或&lt;code&gt;8&lt;/code&gt;
都能正常工作。但是对于S，指定其对齐大小为1并没有生效，其依然是2，其挑选了一个指定值与自然对齐中较大的那个。&lt;/p&gt;

&lt;p&gt;C++引入了新的&lt;a href=&#34;http://en.cppreference.com/w/cpp/language/alignas&#34;&gt;alignas&lt;/a&gt;关键字，其并不是直接指定变量或类型的对齐值，而是定义了一个最严格的需求。由于对齐值是越大越严格的（8字节对其的一定是4字节对齐），
因此其定义的是一个上限。在GCC中，我在测试的时候没有发现与&lt;code&gt;__attribute__((aligned()))&lt;/code&gt;的区别，同样可以设置int的对齐值为1，和说好的不一样啊（摔）！但是在clang中就符合要求了，会提示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alignment.cpp:15:3: error: requested alignment is less than minimum alignment of 4 for type &#39;int&#39;
  alignas(1) int b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以大家在使用的时候，就不要随便将一个变量设置成小于自然对齐的值，否则容易导致跨平台问题。&lt;/p&gt;

&lt;h1 id=&#34;5-struct&#34;&gt;5. struct&lt;/h1&gt;

&lt;p&gt;struct不是一个标量，并且是一个自定义数据类型。这里有ESR的&lt;a href=&#34;http://www.catb.org/esr/structure-packing/&#34;&gt;一篇文章&lt;/a&gt;，本文简单的总结一起他的意思。
struct中的元素并不是紧致排列的，为了保证每个成员都是对齐的，编译器会在struct中的元素之间插入pad，例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo1 {
    char *p;
    char c;
    long x;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假设在64bit的机器上，那么foo1的对齐值为8，这个值其实就是所有成员变量中对齐值最大的那个（一旦满足最大的那个需求，其他就都能满足了），就是&lt;code&gt;char *p&lt;/code&gt;。为了保证所有成员都是对齐的，编译器会
调整内存布局，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo1 {
    char *p;     /* 8 bytes */
    char c;      /* 1 byte  */
    char pad[7]; /* 7 bytes */
    long x;      /* 8 bytes */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于&lt;code&gt;long&lt;/code&gt;是8字节对齐的，而&lt;code&gt;char&lt;/code&gt;是1字节对齐，所以插入了7个char以保证都是对齐的。
在上面我们说到，数组中所有元素都是对齐的，对于struct也是如此。比如下面的例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo4 {
    short s;     /* 2 bytes */
    char c;      /* 1 byte */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;foo4的对齐值为2，但是其size为3，这样放到数组中不是对齐的。所以，为了达到需求，编译器会在struct的末尾插入空白：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct foo4 {
    short s;     /* 2 bytes */
    char c;      /* 1 byte */
    char pad[1];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样其size为4，就能满足需求了。以上的要求对于嵌套的struct也是需要满足的。&lt;/p&gt;

&lt;p&gt;然而我们在编码时往往需要编译器保证struct成员时紧密相连的，这样可以精确控制内存的layout。现代编译器一般都提供&lt;code&gt;#pragma pack&lt;/code&gt;语句来完成这一目的。
一旦定义了pack，那么后面所有的struct都要满足这个其需求。其保证成员变量的对齐值取自然对齐大小和pack中的较小值。所以对于以下示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma pack(1)
struct S1 {
    char a;
    long b;
};
#pragma pack()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有pack，编译器会在其中插入7个字节的pad，最后的size为16字节。有了pack之后，long b的对齐值成了1，那么就是紧凑排列了， size为9字节。如果们将1改成2呢？
此时long b的对齐值为2，那么插入一个pad，size为10字节。如果pack的值为16呢？由于其超过了long的align值8，那么保持long的自然对齐就好了，最终的值size为16。&lt;/p&gt;

&lt;p&gt;顺便说一句，pack仅仅对struct和class有效，一旦设置后，对于后面所有的struct/class都生效，除非使用空的&lt;code&gt;pack()&lt;/code&gt;取消，所以我们在使用的时候往往在struct的定义
前后都写上预处理语句。除此还有&lt;code&gt;push&lt;/code&gt;和&lt;code&gt;pop&lt;/code&gt;，其作用与&lt;code&gt;pack&lt;/code&gt;相同，只是保存了历史纪录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma pack(push, 1)
struct A {
  char c;
  double lf;
#pragma pack(push, 2)
  struct C {
    char e;
    double f;
    char s;
  } e;
#pragma pack(pop)
};
#pragma pack(pop)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其size为&lt;code&gt;21 = 1(char) + 8(double) + 1(pad) + 1(char) + 1(pad) + 8(double) + 1(char) + 1(pad)&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&#34;6-总结&#34;&gt;6. 总结&lt;/h1&gt;

&lt;p&gt;align在实际开发中应用得并不多，但是当我们了解其原理，就能更好地优化struct或类的结构，减少无谓的pad，从达到减少内存占用的目的。除此只玩，当编写某些需要严格控制内存
layout的时候，pack能让我们更好地控制产出的代码。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>理解Linux下动态链接库延迟绑定</title>
      <link>http://sysfork.com/post/linux-dynamic-lib-lazy-load/</link>
      <pubDate>Wed, 07 Sep 2016 22:08:20 +0800</pubDate>
      
      <guid>http://sysfork.com/post/linux-dynamic-lib-lazy-load/</guid>
      <description>&lt;script src=&#34;//cdn.bootcss.com/highlight.js/9.6.0/languages/x86asm.min.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;在编译动态链接库时，为了保证能被正常使用，一般我们会加上-fPIC参数。在使用的动态链接库中的函数时，Linux使用了一种
叫延迟绑定的技术实现运行时的symbol relocation。其中的关键就是GOT(Global Offset Table)和PLT(Procedure linkage Table)。下面就
这一技术的实现简单解释一下。&lt;/p&gt;

&lt;p&gt;首先写一个很简单的需要动态链接的程序，如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//dl_test.c
#include &amp;lt;stdio.h&amp;gt;
int main(int argc, const char *argv[])
{
    puts(&amp;quot;1234&amp;quot;);
    puts(&amp;quot;1234&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后使用&lt;code&gt;gcc&lt;/code&gt;编译并链接: &lt;code&gt;gcc -g dl_test.c -o dl_test.c&lt;/code&gt;。先别急着运行这个程序，我们使用&lt;code&gt;objdump&lt;/code&gt;反编译一下看看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ objdump -S dl_test
......
0000000000400506 &amp;lt;main&amp;gt;:
#include &amp;lt;stdio.h&amp;gt;
int main(int argc, const char *argv[])
{
  400506:       55                      push   %rbp
  400507:       48 89 e5                mov    %rsp,%rbp
  40050a:       48 83 ec 10             sub    $0x10,%rsp
  40050e:       89 7d fc                mov    %edi,-0x4(%rbp)
  400511:       48 89 75 f0             mov    %rsi,-0x10(%rbp)
    puts(&amp;quot;1234&amp;quot;);
  400515:       bf b4 05 40 00          mov    $0x4005b4,%edi
  40051a:       e8 c1 fe ff ff          callq  4003e0 &amp;lt;puts@plt&amp;gt;
    puts(&amp;quot;1234&amp;quot;);
  40051f:       bf b4 05 40 00          mov    $0x4005b4,%edi
  400524:       e8 b7 fe ff ff          callq  4003e0 &amp;lt;puts@plt&amp;gt;
    return 0;
  400529:       b8 00 00 00 00          mov    $0x0,%eax
}
  40052e:       c9                      leaveq
  40052f:       c3                      retq
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，在&lt;code&gt;40051a&lt;/code&gt;和&lt;code&gt;400524&lt;/code&gt;两处都调用了我们的&lt;code&gt;puts&lt;/code&gt;函数。但是看后面的注解，&lt;code&gt;&amp;lt;puts@plt&amp;gt;&lt;/code&gt;表示这并不是&lt;code&gt;puts&lt;/code&gt;的地址，而是另有目的。
我们使用&lt;code&gt;gdb&lt;/code&gt;来跟踪一下执行过程：&lt;code&gt;gdb dl_test&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) l
1	#include &amp;lt;stdio.h&amp;gt;
2	int main(int argc, const char *argv[])
3	{
4	    puts(&amp;quot;1234&amp;quot;);
5	    puts(&amp;quot;1234&amp;quot;);
6	    return 0;
7	}
(gdb) b 4
Breakpoint 1 at 0x400515: file dl_test.c, line 4.
(gdb) r
Starting program: /home/zqc/workspace/cpptest/dl_test

Breakpoint 1, main (argc=1, argv=0x7fffffffeb98) at dl_test.c:4
4	    puts(&amp;quot;1234&amp;quot;);
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里设置了一下断点到第一个&lt;code&gt;puts&lt;/code&gt;的调用出，使用&lt;code&gt;layout asm&lt;/code&gt;切换成汇编模式:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;(gdb) layout asm
   ┌────────────────────────────────────────────────────────────────────────────────────────────┐
B+&amp;gt;│0x400515 &amp;lt;main+15&amp;gt;              mov    $0x4005b4,%edi                                       │
   │0x40051a &amp;lt;main+20&amp;gt;              callq  0x4003e0 &amp;lt;puts@plt&amp;gt;                                  │
   │0x40051f &amp;lt;main+25&amp;gt;              mov    $0x4005b4,%edi                                       │
   │0x400524 &amp;lt;main+30&amp;gt;              callq  0x4003e0 &amp;lt;puts@plt&amp;gt;                                  │
   │0x400529 &amp;lt;main+35&amp;gt;              mov    $0x0,%eax                                            │
   │0x40052e &amp;lt;main+40&amp;gt;              leaveq                                                      │
   │0x40052f &amp;lt;main+41&amp;gt;              retq                                                        │
   │0x400530 &amp;lt;__libc_csu_init&amp;gt;      push   %r15                                                 │
   │0x400532 &amp;lt;__libc_csu_init+2&amp;gt;    mov    %edi,%r15d                                           │
   │0x400535 &amp;lt;__libc_csu_init+5&amp;gt;    push   %r14                                                 │
   │0x400537 &amp;lt;__libc_csu_init+7&amp;gt;    mov    %rsi,%r14                                            │
   │0x40053a &amp;lt;__libc_csu_init+10&amp;gt;   push   %r13                                                 │
   │0x40053c &amp;lt;__libc_csu_init+12&amp;gt;   mov    %rdx,%r13                                            │
   │0x40053f &amp;lt;__libc_csu_init+15&amp;gt;   push   %r12                                                 │
   │0x400541 &amp;lt;__libc_csu_init+17&amp;gt;   lea    0x2001a0(%rip),%r12        # 0x6006e8                │
   │0x400548 &amp;lt;__libc_csu_init+24&amp;gt;   push   %rbp                                                 │
   │0x400549 &amp;lt;__libc_csu_init+25&amp;gt;   lea    0x2001a0(%rip),%rbp        # 0x6006f0                │
   │0x400550 &amp;lt;__libc_csu_init+32&amp;gt;   push   %rbx                                                 │
   │0x400551 &amp;lt;__libc_csu_init+33&amp;gt;   sub    %r12,%rbp                                            │
   └────────────────────────────────────────────────────────────────────────────────────────────┘
child process 8855 In: main                                              Line: 4    PC: 0x400515
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;stepi&lt;/code&gt;或者简写为&lt;code&gt;si&lt;/code&gt;执行下一条汇编指令。我们一直跟踪到&lt;code&gt;call&lt;/code&gt;指令中去：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;   ┌────────────────────────────────────────────────────────────────────────────────────────────────────────┐
  &amp;gt;│0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)   # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;              │
   │0x4003e6 &amp;lt;puts@plt+6&amp;gt;                   pushq  $0x0                                                     │
   │0x4003eb &amp;lt;puts@plt+11&amp;gt;                  jmpq   0x4003d0                                                 │
   │0x4003f0 &amp;lt;__libc_start_main@plt&amp;gt;        jmpq   *0x200502(%rip)   # 0x6008f8 &amp;lt;__libc_start_main@got.plt&amp;gt; │
   │0x4003f6 &amp;lt;__libc_start_main@plt+6&amp;gt;      pushq  $0x1                                                     │
   │0x4003fb &amp;lt;__libc_start_main@plt+11&amp;gt;     jmpq   0x4003d0                                                 │
   │0x400400 &amp;lt;__gmon_start__@plt&amp;gt;           jmpq   *0x2004fa(%rip)   # 0x600900 &amp;lt;__gmon_start__@got.plt&amp;gt;    │
   │0x400406 &amp;lt;__gmon_start__@plt+6&amp;gt;         pushq  $0x2                                                     │
   │0x40040b &amp;lt;__gmon_start__@plt+11&amp;gt;        jmpq   0x4003d0                                                 │
   │0x400410 &amp;lt;_start&amp;gt;                       xor    %ebp,%ebp                                                │
   │0x400412 &amp;lt;_start+2&amp;gt;                     mov    %rdx,%r9                                                 │
   │0x400415 &amp;lt;_start+5&amp;gt;                     pop    %rsi                                                     │
   │0x400416 &amp;lt;_start+6&amp;gt;                     mov    %rsp,%rdx                                                │
   │0x400419 &amp;lt;_start+9&amp;gt;                     and    $0xfffffffffffffff0,%rsp                                 │
   │0x40041d &amp;lt;_start+13&amp;gt;                    push   %rax                                                     │
   │0x40041e &amp;lt;_start+14&amp;gt;                    push   %rsp                                                     │
   │0x40041f &amp;lt;_start+15&amp;gt;                    mov    $0x4005a0,%r8                                            │
   │0x400426 &amp;lt;_start+22&amp;gt;                    mov    $0x400530,%rcx                                           │
   │0x40042d &amp;lt;_start+29&amp;gt;                    mov    $0x400506,%rdi                                           │
   └────────────────────────────────────────────────────────────────────────────────────────────────────────┘
child process 9211 In: puts@plt                                                      Line: ??   PC: 0x4003e0
0x00000000004003e0 in puts@plt ()
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;0x4003e0&lt;/code&gt;是刚刚跳转的地址，也就是&lt;code&gt;&amp;lt;puts@plt&amp;gt;&lt;/code&gt;，从这个名字中我们可以看出，这个地址是属于&lt;code&gt;plt&lt;/code&gt;的。先说一下&lt;code&gt;plt&lt;/code&gt;的作用，&lt;code&gt;plt&lt;/code&gt;的全称是
过程链接表，意思就是当调用一个动态链接库中的函数时，其访问的是其实是&lt;code&gt;plt&lt;/code&gt;中的一个过程，这个过程会完成真正的调用。我们分别看下属于&lt;code&gt;puts&lt;/code&gt;中
&lt;code&gt;plt&lt;/code&gt;的项目&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;  &amp;gt;│0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)        # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;     │
   │0x4003e6 &amp;lt;puts@plt+6&amp;gt;                   pushq  $0x0                                                 │
   │0x4003eb &amp;lt;puts@plt+11&amp;gt;                  jmpq   0x4003d0                                             │
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;0x20050a(%rip)&lt;/code&gt; 即 &lt;code&gt;got&lt;/code&gt;中的地址，在初始情况下，该选项为&lt;code&gt;plt&lt;/code&gt;项中的下一条指令，所以执行&lt;code&gt;jmpq   *0x20050a(%rip)&lt;/code&gt; 直接会进入到
下一条指令&lt;code&gt;pushq&lt;/code&gt;， &lt;code&gt;pushq $0x0&lt;/code&gt;的目的是把当前在符号(&lt;code&gt;puts&lt;/code&gt;)在&lt;code&gt;.rela.plt&lt;/code&gt;中的index。我们可以使用&lt;code&gt;readelf&lt;/code&gt;指令看下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ readelf -r dl_test

Relocation section &#39;.rela.dyn&#39; at offset 0x348 contains 1 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
0000006008d0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0

Relocation section &#39;.rela.plt&#39; at offset 0x360 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
0000006008f0  000100000007 R_X86_64_JUMP_SLO 0000000000000000 puts + 0
0000006008f8  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __libc_start_main + 0
000000600900  000300000007 R_X86_64_JUMP_SLO 0000000000000000 __gmon_start__ + 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，&lt;code&gt;puts&lt;/code&gt;的index为0，第一项，所以这里push的是&lt;code&gt;$0x0&lt;/code&gt;。同理，下面的&lt;code&gt;__libc_start_main&lt;/code&gt;就是&lt;code&gt;$0x1&lt;/code&gt;。 下一行语句是&lt;code&gt;jmpq   0x4003d0&lt;/code&gt;，这个地址是
固定的，所有的&lt;code&gt;plt&lt;/code&gt;入口最后一句语句都是这个，这是个通用的过程。
继续&lt;code&gt;stepi&lt;/code&gt;到jump的位置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;  &amp;gt;│0x4003d0                                pushq  0x20050a(%rip)        # 0x6008e0                     │
   │0x4003d6                                jmpq   *0x20050c(%rip)        # 0x6008e8                    │
   │0x4003dc                                nopl   0x0(%rax)                                            │
   │0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)        # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;     │
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现这个地址就是在&lt;code&gt;puts@plt&lt;/code&gt;的上面，并且也是为了保证和普通&lt;code&gt;plt&lt;/code&gt;入口项目大小(&lt;code&gt;0x10&lt;/code&gt;)，其末尾还用0补齐了(&lt;code&gt;nopl   0x0(%rax)&lt;/code&gt;)。我们重点看一下前面两句。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pushq  0x20050a(%rip)        # 0x6008e0&lt;/code&gt;，这里push了一个地址，这个地址是干嘛的？我们使用&lt;code&gt;gdb&lt;/code&gt;看一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) x /16x 0x6008e0
0x6008e0:       0xf7ffe1a8      0x00007fff      0xf7df02b0      0x00007fff
0x6008f0 &amp;lt;puts@got.plt&amp;gt;:        0x004003e6      0x00000000      0xf7a52a50      0x00007fff
0x600900 &amp;lt;__gmon_start__@got.plt&amp;gt;:      0x00400406      0x00000000      0x00000000      0x00000000
0x600910:       0x00000000      0x00000000      0x00000000      0x00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个地址其实就是&lt;code&gt;got&lt;/code&gt;中的一项，并且在所有普通符号&lt;code&gt;got&lt;/code&gt;的前面。那么目前栈上的元素是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| 0x00007ffff7ffe1a8 |
| 0x0                |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来到是&lt;code&gt;jmpq   *0x20050c(%rip)&lt;/code&gt; 这个地址也是在plt上，紧挨着上面push的地址，值为&lt;code&gt;0x00007ffff7df02b0&lt;/code&gt;，我们可以继续&lt;code&gt;stepi&lt;/code&gt;进去，也可以
通过&lt;code&gt;disassemble 0x00007ffff7df02b0&lt;/code&gt;查看。或者，使用&lt;code&gt;info symbol 0x00007ffff7df02b0&lt;/code&gt;直接查看。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) info symbol 0x00007ffff7df02b0
_dl_runtime_resolve in section .text of /lib64/ld-linux-x86-64.so.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里可以看出，这是属于&lt;code&gt;ld-linux-x86-64.so.2&lt;/code&gt;里面的一个方法。这个so属于&lt;code&gt;glibc&lt;/code&gt;的一部分，我们可以下载&lt;a href=&#34;ftp://ftp.gnu.org/gnu/glibc&#34;&gt;glibc&lt;/a&gt;来查看。最终我们找到了这个符号定义文件，
其位置在&lt;code&gt;sysdeps/x86_64/dl-trampoline.S&lt;/code&gt;，内容如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt; 28     .globl _dl_runtime_resolve
 29     .type _dl_runtime_resolve, @function
 30     .align 16
 31     cfi_startproc
 32 _dl_runtime_resolve:
 33     cfi_adjust_cfa_offset(16) # Incorporate PLT
 34     subq $56,%rsp
 35     cfi_adjust_cfa_offset(56)
 36     movq %rax,(%rsp)    # Preserve registers otherwise clobbered.
 37     movq %rcx, 8(%rsp)
 38     movq %rdx, 16(%rsp)
 39     movq %rsi, 24(%rsp)
 40     movq %rdi, 32(%rsp)
 41     movq %r8, 40(%rsp)
 42     movq %r9, 48(%rsp)
 43     movq 64(%rsp), %rsi # Copy args pushed by PLT in register.
 44     movq 56(%rsp), %rdi # %rdi: link_map, %rsi: reloc_index
 45     call _dl_fixup      # Call resolver.
 46     movq %rax, %r11     # Save return value
 47     movq 48(%rsp), %r9  # Get register content back.
 48     movq 40(%rsp), %r8
 49     movq 32(%rsp), %rdi
 50     movq 24(%rsp), %rsi
 51     movq 16(%rsp), %rdx
 52     movq 8(%rsp), %rcx
 53     movq (%rsp), %rax
 54     addq $72, %rsp      # Adjust stack(PLT did 2 pushes)
 55     cfi_adjust_cfa_offset(-72)
 56     jmp *%r11       # Jump to function address.
 57     cfi_endproc
 58     .size _dl_runtime_resolve, .-_dl_runtime_resolve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从43行开始是我们的逻辑。43行取出了我们刚刚push的第一个参数，就是&lt;code&gt;$0x0&lt;/code&gt;，放到&lt;code&gt;%rsi&lt;/code&gt;中，然后是我们push的第二个参数，&lt;code&gt;0x00007ffff7ffe1a8&lt;/code&gt;到&lt;code&gt;%rsi&lt;/code&gt;中。
为什么是这两个寄存器呢？我们&lt;code&gt;man syscall&lt;/code&gt;一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       arch/ABI   arg1   arg2   arg3   arg4   arg5   arg6   arg7
       ──────────────────────────────────────────────────────────
       x86_64     rdi    rsi    rdx    r10    r8     r9     -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出linux下的函数传参方式， 那么&lt;code&gt;%rdi&lt;/code&gt;就是参数1，而&lt;code&gt;%rsi&lt;/code&gt;就是参数2了。接下来是&lt;code&gt;call _dl_fixup&lt;/code&gt;，这个函数返回值就是指向&lt;code&gt;puts&lt;/code&gt;存储地址位置的指针了，后面可以看到
代码中将这个指针保存到了&lt;code&gt;%r11&lt;/code&gt;，然后&lt;code&gt;jmp *%r11&lt;/code&gt;。完成了一次函数调用，下面我们来看看&lt;code&gt;_dl_fixup&lt;/code&gt;做了些什么。同样，这个函数也是&lt;code&gt;gblic&lt;/code&gt;中定义的，位置在&lt;code&gt;elf/dl-runtime.c&lt;/code&gt;中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;59 DL_FIXUP_VALUE_TYPE
60 __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE
61 _dl_fixup (
62 # ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS
63        ELF_MACHINE_RUNTIME_FIXUP_ARGS,
64 # endif
65        struct link_map *l, ElfW(Word) reloc_arg)
66 {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从函数原型我们可以看出，之前&lt;code&gt;push&lt;/code&gt;的两个参数分别是&lt;code&gt;link_map&lt;/code&gt;和&lt;code&gt;reloc_arg&lt;/code&gt;，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt; 67   const ElfW(Sym) *const symtab
 68     = (const void *) D_PTR (l, l_info[DT_SYMTAB]);
 69   const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);
 70 
 71   const PLTREL *const reloc
 72     = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
 73   const ElfW(Sym) *sym = &amp;amp;symtab[ELFW(R_SYM) (reloc-&amp;gt;r_info)];
 74   void *const rel_addr = (void *)(l-&amp;gt;l_addr + reloc-&amp;gt;r_offset);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里做了一下转型，那么&lt;code&gt;symtab&lt;/code&gt;和&lt;code&gt;strtab&lt;/code&gt;分别是对于&lt;code&gt;section&lt;/code&gt;的地址，而&lt;code&gt;reloc_addr&lt;/code&gt;就是我们&lt;code&gt;got&lt;/code&gt;中的&lt;code&gt;puts@got.plt&lt;/code&gt;的地址。接下来就是符号解析过程了，
后面可能会有文章来解释这个过程。当找到目标地址后&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//elf/dl-runtime.c
148   return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);
//sysdeps/x86_64/dl-machine.h
205 static inline ElfW(Addr)
206 elf_machine_fixup_plt (struct link_map *map, lookup_t t,
207                const ElfW(Rela) *reloc,
208                ElfW(Addr) *reloc_addr, ElfW(Addr) value)
209 {
210   return *reloc_addr = value;
211 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;value&lt;/code&gt;就是目标函数地址，也就是&lt;code&gt;puts&lt;/code&gt;的真正地址，代码中设置其到了&lt;code&gt;puts@got.plt&lt;/code&gt;的位置并返回。&lt;/p&gt;

&lt;p&gt;以上就是第一次调用&lt;code&gt;puts&lt;/code&gt;的过程了，当第二次调用&lt;code&gt;puts&lt;/code&gt;时，由于&lt;code&gt;puts@got.plt&lt;/code&gt;已经有了正确的地址，所以&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-x86asm&#34;&gt;  &amp;gt;│0x4003e0 &amp;lt;puts@plt&amp;gt;                     jmpq   *0x20050a(%rip)        # 0x6008f0 &amp;lt;puts@got.plt&amp;gt;    │
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就直接跳转到正确的&lt;code&gt;puts&lt;/code&gt;位置，完成了函数调用。所以，&lt;code&gt;linux&lt;/code&gt;下的这种懒绑定方式实现了在不使用符号的时候不解析，而需要使用的时候
只在第一步开销比较大，后面的调用开销无非多了一次跳转和一次寻址操作而已。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo 集成 Mathjax和graphviz</title>
      <link>http://sysfork.com/post/integrate-mathjax-viz-with-hugo/</link>
      <pubDate>Fri, 02 Sep 2016 09:41:17 +0800</pubDate>
      
      <guid>http://sysfork.com/post/integrate-mathjax-viz-with-hugo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;是一个比&lt;a href=&#34;https://hexo.io&#34;&gt;hexo&lt;/a&gt;更简单易用的静态页面生成工具，其只有一个可执行文件，部署环境简单，本博客就是基于hugo构建的。&lt;/p&gt;

&lt;p&gt;我们在写博客的时候经常应用到公式和图表，这分别可以使用&lt;a href=&#34;https://www.mathjax.org/&#34;&gt;mathjax&lt;/a&gt;和&lt;a href=&#34;https://github.com/mdaines/viz.js&#34;&gt;viz.js&lt;/a&gt;实现。hugo并没有提供
内置的支持，所以需要我们自己写相关的支持。&lt;/p&gt;

&lt;p&gt;由于并不是所有的文章都需要mathjax和viz.js，所以需要按需使用，这个可以在每个post的前言上定义&lt;code&gt;plugins&lt;/code&gt;变量，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title = &amp;quot;Hugo 集成 Mathjax和graphviz&amp;quot;
plugins = [&amp;quot;mathjax&amp;quot;, &amp;quot;viz&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再&lt;code&gt;partials&lt;/code&gt;目录下添加一个&lt;code&gt;post_plugins.html&lt;/code&gt;，并在&lt;code&gt;post/single.html&lt;/code&gt;引入这个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ partial &amp;quot;post_plugins.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;post_plugins.html&lt;/code&gt;文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;plugins&amp;quot; }}
    {{ range .Params.plugins }}
        {{ $path := . | printf &amp;quot;post_plugins/%s.html&amp;quot;}}
        {{ partial $path }}
    {{ end }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;逻辑即通过便利&lt;code&gt;plugins&lt;/code&gt;参数内容，然后引入对应的html文件。在目前的这个例子中，我们使用了mathjax和viz。其中&lt;code&gt;post_plugins/mathjax.html&lt;/code&gt;的内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.bootcss.com/mathjax/2.6.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
MathJax.Hub.Queue(function() {
  var all = MathJax.Hub.getAllJax(), i;
  for(i = 0; i &amp;lt; all.length; i += 1) {
      all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
  }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就能使用&lt;code&gt;\$&lt;/code&gt;或&lt;code&gt;\$\$&lt;/code&gt;来编写公式了，最终示例表现如下：
$$ [ \left [ &amp;#8211; \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi ]$$&lt;/p&gt;

&lt;p&gt;对于&lt;code&gt;post_plugins/viz.html&lt;/code&gt;内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;//cdn.bootcss.com/viz.js/1.3.0/viz.js&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function(){
    var vizPrefix = &amp;quot;language-viz-&amp;quot;;
    Array.prototype.forEach.call(document.querySelectorAll(&amp;quot;[class^=&amp;quot; + vizPrefix + &amp;quot;]&amp;quot;), function(x){
        var engine;
        x.getAttribute(&amp;quot;class&amp;quot;).split(&amp;quot; &amp;quot;).forEach(function(cls){
            if (cls.startsWith(vizPrefix)) {
                engine = cls.substr(vizPrefix.length);
            }
        });
        var image = new DOMParser().parseFromString(Viz(x.innerText, {format:&amp;quot;svg&amp;quot;, engine:engine}), &amp;quot;image/svg+xml&amp;quot;);
        x.parentNode.insertBefore(image.documentElement, x);
        x.style.display = &#39;none&#39;
    });
})();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码的作用，就是将codeblock类型为language-viz-xxx的自动渲染为svg图像显示，以下是示例：&lt;/p&gt;

&lt;p&gt;原始内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ```viz-dot
    digraph g { a -&amp;gt; b; }
    ```

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-viz-dot&#34;&gt;    digraph g { a -&amp;gt; b; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同理，对于其他需要特殊支持的格式或表现，都可以通过添加post_plugins来实现。以上代码都在本网站的&lt;a href=&#34;https://github.com/usbuild/site.git&#34;&gt;github&lt;/a&gt;上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lua Table中HashMap介绍</title>
      <link>http://sysfork.com/post/lua-hashtable-introduction/</link>
      <pubDate>Thu, 01 Sep 2016 17:40:08 +0800</pubDate>
      
      <guid>http://sysfork.com/post/lua-hashtable-introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.lua.org/pil/2.5.html&#34;&gt;Table&lt;/a&gt; 在Lua中有着极其重要的应用，从核心语言实现，如&lt;a href=&#34;https://en.wikipedia.org/wiki/String_interning&#34;&gt;short string intern&lt;/a&gt;，
到利用&lt;a href=&#34;https://www.lua.org/pil/13.html&#34;&gt;metatable&lt;/a&gt;实现的&lt;a href=&#34;lua-users.org/wiki/LuaClassesWithMetatable&#34;&gt;class&lt;/a&gt;，table几乎无所不能。如此高频度地利用也就意味着lua必须要有一个高效的
table实现。&lt;/p&gt;

&lt;p&gt;很多语言提供了array和associative array两种数据结构。array是指以某个指定的最小整数下标(一般是0)开始的连续存储的数据结构，它有vector、list、array、ArrayList等多种名称；associative array，中文
也叫关联数组，即将一对key/pair之间关联起来，它一般也被称为map、dict等。Lua并不提供array，因为数组本身也是一种特殊的关联数组。但是从内部表示上，array和map有着极大的不同，array只需要一块连续的
内存即可实现，而map则有多种实现。Lua为了效率，将一部分整数下标的元素存储在array part中，而将其他元素存储在hashmap中，实现在外部接口不变的情况下实现了效率的最大化。array部分没有什么特别需要
优化的，其就是一整块连续的内存，存储和读取的时间复杂度都是O(1)，而hashmap的实现称为了lua table设计的重点。&lt;/p&gt;

&lt;p&gt;map有多种实现手段，在stl中，默认的map使用的是红黑树，存储和读取的时间复杂度都是O(logn)；虽然红黑树的表现十分稳定，但是实现比较复杂而且无法满足极端性能要求，
C++11中添加新的&lt;a href=&#34;http://en.cppreference.com/w/cpp/container/unordered_map&#34;&gt;unordered_map&lt;/a&gt;，其实现就是使用了一个hashmap。hashmap的基本流程是使用一个hash函数来将
一个key映射到一块连续内存中，实现在理想情况下访问和删除接近O(1)的时间复杂度。&lt;/p&gt;

&lt;p&gt;由于一般key的取值范围大于hashmap slot数目，所以不可避免地出现冲突的状况。在教科书中，解决这种冲突一般有两种方法：&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Separate_chaining&#34;&gt;链表法&lt;/a&gt;
和&lt;a href=&#34;https://en.wikipedia.org/wiki/Open_addressing&#34;&gt;开放寻址法&lt;/a&gt;。链表法的实现比较简单，将冲突的元素使用链表链接起来即可；而开放寻址法则需要多次计算，直至找到一个没有冲突的slot为止。
这两者都有自己的优缺点，链表法由于使用了链表，无法充分利用CPU缓存，并且实现深拷贝难度较大；而开放寻址法无法实现删除元素的功能，并且当元素密度比较大时，效率非常低。&lt;/p&gt;

&lt;p&gt;Lua table使用了一个折中的方案，叫做&lt;a href=&#34;https://en.wikipedia.org/wiki/Coalesced_hashing&#34;&gt;Coalesced_hashing&lt;/a&gt;，结合使用了链表法和开放寻址法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/4/4c/CoalescedHash.jpg&#34; alt=&#34;Coalesced_hashing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当插入一个元素时，定义其原本应该在的位置为mainposition，如果mainpoisition对应的slot是空的，则直接插入；如果非空，看看在那个位置上的元素的mainposition是不是当前的slot，如果不是的
话，则将其移动到任意一个空的slot(位置A)，然后将当前的元素插入到mainposition位置，并将当前的next字段设置成位置A，形成链表。如果占用元素mainposition就是当前位置，则将待插入的
元素插入到任意一个空的位置上，并链接到占用元素的后面。&lt;/p&gt;

&lt;p&gt;通过上面的过程，实现了所有的元素都尽量保存在mainposition上，当查找的时候也能使用更少的次数来找到元素位置。这对元素本来就在hashmap中，效率是比较高的。但是，当元素不在hashmap中，查找的代价
比较高。&lt;/p&gt;

&lt;p&gt;lua table的代码实现在&lt;a href=&#34;https://www.lua.org/source/5.3/ltable.c.html&#34;&gt;这里&lt;/a&gt;，实现非常简洁明了，也不是很难懂，但是对于平时经常使用lua的同学来说读一读还是很有必要的。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>